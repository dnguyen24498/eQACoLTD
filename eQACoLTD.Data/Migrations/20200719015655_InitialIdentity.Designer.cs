// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eQACoLTD.Data.DBContext;

namespace eQACoLTD.Data.Migrations
{
    [DbContext(typeof(AppIdentityDbContext))]
    [Migration("20200719015655_InitialIdentity")]
    partial class InitialIdentity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AppRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AppUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("AppUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("4dce65a4-01ab-4a3c-9d3f-090ab2803c60"),
                            RoleId = new Guid("d41440df-bfc5-4599-ba94-6b43e8e1ed26")
                        },
                        new
                        {
                            UserId = new Guid("e90f766a-f9b2-4280-ae28-411053af3891"),
                            RoleId = new Guid("a5479d8a-70d6-47b2-8dda-20f6c67341ec")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserTokens");
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(true);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a5479d8a-70d6-47b2-8dda-20f6c67341ec"),
                            ConcurrencyStamp = "fc3bfb4e-2f1f-4b11-84ba-22a821405f1c",
                            Description = "Quyền nhân viên bán hàng",
                            Name = "Salesman",
                            NormalizedName = "Salesman"
                        },
                        new
                        {
                            Id = new Guid("d41440df-bfc5-4599-ba94-6b43e8e1ed26"),
                            ConcurrencyStamp = "29f0af50-9700-46a6-8ff4-5437f7da71e8",
                            Description = "Quyền quản trị viên",
                            Name = "Admin",
                            NormalizedName = "Admin"
                        });
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("District")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("SubDistrict")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("AppUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4dce65a4-01ab-4a3c-9d3f-090ab2803c60"),
                            AccessFailedCount = 0,
                            Address = "Số nhà 88",
                            City = "Hải Phòng",
                            ConcurrencyStamp = "2d208e3c-c7a1-49e3-85c8-93efd9d75cd2",
                            DOB = new DateTime(1998, 4, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            District = "Hồng Bàng",
                            Email = "dnguyen24498@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Nguyễn",
                            Gender = true,
                            LastName = "Nguyên",
                            LockoutEnabled = false,
                            MiddleName = "Dương",
                            NormalizedEmail = "dnguyen24498@gmail.com",
                            NormalizedUserName = "admin",
                            PasswordHash = "AQAAAAEAACcQAAAAEBUn2YTOqEqoK7TC7HTRS2oTKCsVn8TOcaX4OZef5REBz2Q5X5rsKRrj1q4OUKlfqg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Street = "Hải triều",
                            SubDistrict = "Quán Toan",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = new Guid("e90f766a-f9b2-4280-ae28-411053af3891"),
                            AccessFailedCount = 0,
                            Address = "Số nhà 88",
                            City = "Hải Phòng",
                            ConcurrencyStamp = "c43c02d4-b32f-496b-a4a8-e0fd010c95ee",
                            DOB = new DateTime(1998, 4, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            District = "Hồng Bàng",
                            Email = "dnguyen244@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Nguyễn",
                            Gender = true,
                            LastName = "Nguyên",
                            LockoutEnabled = false,
                            MiddleName = "Dương",
                            NormalizedEmail = "dnguyen244@gmail.com",
                            NormalizedUserName = "dnguyen244",
                            PasswordHash = "AQAAAAEAACcQAAAAEIGpSVUdbCdLksCo58vBC5PQh6/unT/FOsAG1islGksPyScIVV+9mtCMQpTt72vFSw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Street = "Hải triều",
                            SubDistrict = "Quán Toan",
                            TwoFactorEnabled = false,
                            UserName = "dnguyen244"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
