// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eQACoLTD.Data.DBContext;

namespace eQACoLTD.Data.Migrations
{
    [DbContext(typeof(AppIdentityDbContext))]
    partial class AppIdentityDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AppRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AppUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("AppUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("8917bf80-34a9-4524-b6dc-a08fdb9c93e0"),
                            RoleId = new Guid("4f12c9bd-597f-41dc-9e75-602a094018ee")
                        },
                        new
                        {
                            UserId = new Guid("30aca85c-3f9b-4e55-a6f3-59b629ed0fac"),
                            RoleId = new Guid("8e869c4f-c2e5-4b99-9af2-6d103f0fc8b7")
                        },
                        new
                        {
                            UserId = new Guid("7bdac961-0b05-4494-89fa-60d08b98687b"),
                            RoleId = new Guid("2c3d4339-4b5d-4a51-8657-ed0097edefc2")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserTokens");
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("AppRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4f12c9bd-597f-41dc-9e75-602a094018ee"),
                            ConcurrencyStamp = "0c4245b9-f15f-4000-b711-e0aa4736d016",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Quyền quản trị viên",
                            FromDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Administrator",
                            NormalizedName = "Administrator",
                            ToDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("2c3d4339-4b5d-4a51-8657-ed0097edefc2"),
                            ConcurrencyStamp = "72b623e6-2792-43a6-b55b-aa413707eac0",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Quyền nhân viên kho",
                            FromDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "WarehouseStaff",
                            NormalizedName = "WarehouseStaff",
                            ToDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("d834062e-2a02-4e49-bf93-664ff8d6cfc9"),
                            ConcurrencyStamp = "e5fda3ca-e5ff-44fb-a006-4e26c4f9244a",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Quyền nhân viên lễ tân",
                            FromDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Receptionist",
                            NormalizedName = "Receptionist",
                            ToDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("8e869c4f-c2e5-4b99-9af2-6d103f0fc8b7"),
                            ConcurrencyStamp = "8bcdc8a5-2069-438d-b010-dd680083026e",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Quyền nhân viên thu ngân",
                            FromDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Cashier",
                            NormalizedName = "Cashier",
                            ToDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 9, 8, 12, 33, 33, 368, DateTimeKind.Local).AddTicks(1666));

                    b.Property<string>("Email")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("EmailConfirmed")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("varchar(30)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(14)");

                    b.HasKey("Id");

                    b.ToTable("AppUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8917bf80-34a9-4524-b6dc-a08fdb9c93e0"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dc83e988-1d27-4e5a-8c58-6019713165b3",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "dnguyen24498@gmail.com",
                            EmailConfirmed = "1",
                            LockoutEnabled = false,
                            NormalizedEmail = "DNGUYEN24498@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEO5CY+HAsiRPbRM2zIZNJBvXfDQy2Eur5xuIKwJpHo5EUd0ndID3HhqxgdQtln57Xg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = new Guid("30aca85c-3f9b-4e55-a6f3-59b629ed0fac"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "aad4d7a8-0283-4412-89fa-45103caaf1eb",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "duongnguyenadhp1@gmail.com",
                            EmailConfirmed = "1",
                            LockoutEnabled = false,
                            NormalizedEmail = "DUONGNGUYENADHP1@GMAIL.COM",
                            NormalizedUserName = "EPN0001",
                            PasswordHash = "AQAAAAEAACcQAAAAENggjC8Qcnr7nVj9wWtOFEXKlrTBRr/1KVG0liecr+pjql9USz6AvXah6mVbnv7RtQ==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "epn0001"
                        },
                        new
                        {
                            Id = new Guid("7bdac961-0b05-4494-89fa-60d08b98687b"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3bc80606-8e14-4697-a679-7d53c3ba7886",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "duongnguyenadhp2@gmail.com",
                            EmailConfirmed = "1",
                            LockoutEnabled = false,
                            NormalizedEmail = "DUONGNGUYENADHP2@GMAIL.COM",
                            NormalizedUserName = "epn0002",
                            PasswordHash = "AQAAAAEAACcQAAAAEBcK7crSQ/foPah+lW+RLyG4bamHkJ2lEOF0RIDDIaabQr7HTnWaYyNksTifOPorrw==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "epn0002"
                        },
                        new
                        {
                            Id = new Guid("cde674e1-6c47-4b00-ac56-558e0d85beff"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4b51faef-b238-417e-977b-0f91cf14b4c8",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "duongnguyenadhp@gmail.com",
                            EmailConfirmed = "1",
                            LockoutEnabled = false,
                            NormalizedEmail = "DUONGNGUYENADHP@GMAIL.COM",
                            NormalizedUserName = "cus0001",
                            PasswordHash = "AQAAAAEAACcQAAAAEKVI7hUgKzukM9Mf3kucxFHXQPIRjmADywderRDKQ0mzpKro/YDEtzURSPBXESdAxQ==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "cus0001"
                        },
                        new
                        {
                            Id = new Guid("a0a054bf-12c6-4b54-90e9-351fed0629a9"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d179c0be-51d4-4172-aab2-71c2cfa133e3",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "dophuongthao@gmail.com",
                            EmailConfirmed = "1",
                            LockoutEnabled = false,
                            NormalizedEmail = "DOPHUONGTHAO@GMAIL.COM",
                            NormalizedUserName = "cus0002",
                            PasswordHash = "AQAAAAEAACcQAAAAEAYYBAIKaa1T2uzAHwF9dt0u6i5fSiaEjdgC+wcKbwp180juqocgT4rdNOLgKDGW3Q==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "cus0002"
                        });
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.Brand", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = "8f968a61-69da-4581-8279-61516dc17639",
                            Name = "Apple"
                        },
                        new
                        {
                            Id = "fd9bf3ed-6e72-4751-bef8-c207b74bc7d2",
                            Name = "Dell"
                        },
                        new
                        {
                            Id = "742f5bf2-9476-46ea-b3ab-bfe9feb523fc",
                            Name = "HP"
                        });
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.Cart", b =>
                {
                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductId")
                        .HasColumnType("varchar(12)");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("UserId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ThumbnailImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = "94b4b0d2-d389-4ded-a61b-50249e14525a",
                            Name = "Laptop"
                        },
                        new
                        {
                            Id = "8c92bd25-48e6-4c45-9b27-8dd655d86ba1",
                            Name = "PC"
                        });
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.Customer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(12)");

                    b.Property<string>("Address")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(300)")
                        .HasDefaultValue(null);

                    b.Property<string>("AvatarPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerTypeId")
                        .HasColumnType("char(36)");

                    b.Property<string>("DefaultPhoneNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(30)")
                        .HasDefaultValue(null);

                    b.Property<DateTime>("Dob")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("FullName")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(200)")
                        .HasDefaultValue(null);

                    b.Property<bool?>("Gender")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(null);

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CustomerTypeId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = "CUS0001",
                            Address = "Số 99, Hải Triều, Số 99, Hải Triều, Quán Toan, Hồng Bàng, Hải Phòng",
                            CustomerTypeId = "14b57c23-2953-45a5-9b6a-227758278c7e",
                            Dob = new DateTime(1998, 4, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FullName = "Bùi Thùy Dương",
                            Gender = false,
                            IsDelete = false,
                            UserId = new Guid("cde674e1-6c47-4b00-ac56-558e0d85beff")
                        },
                        new
                        {
                            Id = "CUS0002",
                            Address = "Số 99, Hải Triều, Số 99, Hải Triều, Quán Toan, Hồng Bàng, Hải Phòng",
                            CustomerTypeId = "14b57c23-2953-45a5-9b6a-227758278c7e",
                            Dob = new DateTime(1998, 4, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FullName = "Đỗ Phương Thảo",
                            Gender = false,
                            IsDelete = false,
                            UserId = new Guid("a0a054bf-12c6-4b54-90e9-351fed0629a9")
                        });
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.CustomerType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 9, 8, 12, 33, 33, 375, DateTimeKind.Local).AddTicks(2209));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("CustomerTypes");

                    b.HasData(
                        new
                        {
                            Id = "14b57c23-2953-45a5-9b6a-227758278c7e",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Bán lẻ"
                        },
                        new
                        {
                            Id = "0cacdb29-9fd7-4b10-b040-230545e7452c",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Bán buôn"
                        });
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.DiscountType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("DiscountTypes");

                    b.HasData(
                        new
                        {
                            Id = "a2bf4601-83a4-413e-8f9b-c6457151dc44",
                            Name = "Phần trăm"
                        },
                        new
                        {
                            Id = "736b454c-6b06-45c1-93fd-ee426ba100d8",
                            Name = "Tiền mặt"
                        });
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.Employee", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(12)");

                    b.Property<string>("Address")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(300)")
                        .HasDefaultValue(null);

                    b.Property<string>("AvatarPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DefaultPhoneNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(30)")
                        .HasDefaultValue(null);

                    b.Property<DateTime>("Dob")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("FullName")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(200)")
                        .HasDefaultValue(null);

                    b.Property<bool?>("Gender")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(null);

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = "EPN0001",
                            Address = "Số 88, Hải Triều, Số 99, Hải Triều, Quán Toan, Hồng Bàng, Hải Phòng",
                            DefaultPhoneNumber = "0123456789",
                            Dob = new DateTime(1998, 4, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FullName = "Nguyễn Dương Nguyên",
                            Gender = true,
                            IsDelete = false,
                            UserId = new Guid("30aca85c-3f9b-4e55-a6f3-59b629ed0fac")
                        },
                        new
                        {
                            Id = "EPN0002",
                            Address = "Số 99, Hải Triều, Số 99, Hải Triều, Quán Toan, Hồng Bàng, Hải Phòng",
                            DefaultPhoneNumber = "0123456789",
                            Dob = new DateTime(1998, 4, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FullName = "Bùi Thùy Dương",
                            Gender = false,
                            IsDelete = false,
                            UserId = new Guid("7bdac961-0b05-4494-89fa-60d08b98687b")
                        });
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(12)");

                    b.Property<string>("CustomerId")
                        .HasColumnType("varchar(12)");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 9, 8, 12, 33, 33, 426, DateTimeKind.Local).AddTicks(5878));

                    b.Property<string>("DiscountDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiscountTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasDefaultValue(null);

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("OrderStatusId")
                        .HasColumnType("char(36)");

                    b.Property<string>("PaymentStatusId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DiscountTypeId");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("PaymentStatusId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = "ODN0001",
                            CustomerId = "CUS0001",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DiscountValue = 0m,
                            IsDelete = false,
                            OrderStatusId = "f1e884de-b62d-43ad-9ec1-6bfe13e9aadf",
                            PaymentStatusId = "f3288f36-e405-413f-baa3-5c232ea7bd3f"
                        },
                        new
                        {
                            Id = "ODN0002",
                            CustomerId = "CUS0002",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DiscountValue = 0m,
                            IsDelete = false,
                            OrderStatusId = "0b243072-2e23-4397-81b5-cbf887b1d8d3",
                            PaymentStatusId = "0b710f3a-6426-4dff-89ec-afc9f154b668"
                        });
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.OrderDetail", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("OrderId")
                        .HasColumnType("varchar(12)");

                    b.Property<string>("ProductId")
                        .HasColumnType("varchar(12)");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("ServiceName")
                        .HasColumnType("nvarchar(300)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");

                    b.HasData(
                        new
                        {
                            Id = "6e5c27aa-30b4-479e-8686-175094ed6c5b",
                            OrderId = "ODN0001",
                            ProductId = "PRN0001",
                            Quantity = 1,
                            UnitPrice = 22500000m
                        },
                        new
                        {
                            Id = "906a00ad-0fa9-48ef-ba51-e326d3f77ea1",
                            OrderId = "ODN0002",
                            ProductId = "PRN0002",
                            Quantity = 1,
                            UnitPrice = 22500000m
                        });
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.OrderStatus", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("OrderStatuses");

                    b.HasData(
                        new
                        {
                            Id = "592b1f98-6c7a-45b8-a972-a00571226f99",
                            Name = "Đặt hàng"
                        },
                        new
                        {
                            Id = "0b243072-2e23-4397-81b5-cbf887b1d8d3",
                            Name = "Đang giao dịch"
                        },
                        new
                        {
                            Id = "f1e884de-b62d-43ad-9ec1-6bfe13e9aadf",
                            Name = "Hoàn thành"
                        },
                        new
                        {
                            Id = "2d749b3d-9744-4daf-9dd4-a3916d987ec8",
                            Name = "Kết thúc"
                        },
                        new
                        {
                            Id = "f4273e3b-fe73-4daa-834f-4e19f8d36bd1",
                            Name = "Đã hủy"
                        });
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.PaymentMethod", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods");

                    b.HasData(
                        new
                        {
                            Id = "8eb1249d-277d-450c-a023-92f80fc31f7f",
                            Name = "Tiền mặt"
                        },
                        new
                        {
                            Id = "6e362134-8060-40bd-90ba-faa161bbd7e0",
                            Name = "Quẹt thẻ"
                        },
                        new
                        {
                            Id = "28021394-ea05-45aa-ab43-30cbe1cd53fc",
                            Name = "Chuyển khoản"
                        });
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.PaymentStatus", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("PaymentStatuses");

                    b.HasData(
                        new
                        {
                            Id = "73e1a911-ff43-4573-981b-3c363d4146e4",
                            Name = "Chưa thanh toán"
                        },
                        new
                        {
                            Id = "0b710f3a-6426-4dff-89ec-afc9f154b668",
                            Name = "Thanh toán một phần"
                        },
                        new
                        {
                            Id = "f3288f36-e405-413f-baa3-5c232ea7bd3f",
                            Name = "Đã thanh toán"
                        });
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.PaymentVoucher", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(12)");

                    b.Property<string>("CustomerId")
                        .HasColumnType("varchar(12)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<decimal>("Paid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PayDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 9, 8, 12, 33, 33, 421, DateTimeKind.Local).AddTicks(4561));

                    b.Property<string>("PaymentMethodId")
                        .HasColumnType("char(36)");

                    b.Property<string>("PurchaseOrderId")
                        .HasColumnType("varchar(12)");

                    b.Property<string>("SupplierId")
                        .HasColumnType("varchar(12)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("PurchaseOrderId");

                    b.HasIndex("SupplierId");

                    b.ToTable("PaymentVouchers");

                    b.HasData(
                        new
                        {
                            Id = "PVN0001",
                            IsDelete = false,
                            Paid = 2250000000m,
                            PayDate = new DateTime(2020, 9, 8, 12, 33, 33, 478, DateTimeKind.Local).AddTicks(6612),
                            PaymentMethodId = "8eb1249d-277d-450c-a023-92f80fc31f7f",
                            PurchaseOrderId = "PON0001"
                        },
                        new
                        {
                            Id = "PVN0002",
                            IsDelete = false,
                            Paid = 500000000m,
                            PayDate = new DateTime(2020, 9, 8, 12, 33, 33, 478, DateTimeKind.Local).AddTicks(8235),
                            PaymentMethodId = "8eb1249d-277d-450c-a023-92f80fc31f7f",
                            PurchaseOrderId = "PON0002"
                        });
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(12)");

                    b.Property<string>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasDefaultValue(null);

                    b.Property<string>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasDefaultValue(null);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("Information")
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("RetailPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<int>("StarScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("Views")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("WarrantyPeriod")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<decimal>("WholesalePrices")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = "PRN0001",
                            BrandId = "8f968a61-69da-4581-8279-61516dc17639",
                            CategoryId = "94b4b0d2-d389-4ded-a61b-50249e14525a",
                            IsDelete = false,
                            Name = "Macbook Pro 2020",
                            RetailPrice = 22500000m,
                            StarScore = 1,
                            Views = 1340,
                            WarrantyPeriod = 36,
                            WholesalePrices = 21500000m
                        },
                        new
                        {
                            Id = "PRN0002",
                            BrandId = "8f968a61-69da-4581-8279-61516dc17639",
                            CategoryId = "94b4b0d2-d389-4ded-a61b-50249e14525a",
                            IsDelete = false,
                            Name = "Macbook Air 2020",
                            RetailPrice = 20500000m,
                            StarScore = 1,
                            Views = 1340,
                            WarrantyPeriod = 36,
                            WholesalePrices = 20000000m
                        });
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.ProductImage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("FullPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsThumbnail")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ProductId")
                        .HasColumnType("varchar(12)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.ProductReview", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ProductId")
                        .HasColumnType("varchar(12)");

                    b.Property<int>("StarScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("ProductReviews");
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.ProductReviewReply", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ProductReviewId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductReviewId");

                    b.HasIndex("UserId");

                    b.ToTable("ProductReviewReplies");
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.PurchaseOrder", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(12)");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 9, 8, 12, 33, 33, 415, DateTimeKind.Local).AddTicks(7693));

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DiscountDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiscountTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasDefaultValue(null);

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("OrderStatusId")
                        .HasColumnType("char(36)");

                    b.Property<string>("PaymentStatusId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("PurchaseDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 9, 8, 12, 33, 33, 415, DateTimeKind.Local).AddTicks(8141));

                    b.Property<string>("SupplierId")
                        .HasColumnType("varchar(12)");

                    b.HasKey("Id");

                    b.HasIndex("DiscountTypeId");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("PaymentStatusId");

                    b.HasIndex("SupplierId");

                    b.ToTable("PurchaseOrders");

                    b.HasData(
                        new
                        {
                            Id = "PON0001",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryDate = new DateTime(2020, 9, 8, 12, 33, 33, 477, DateTimeKind.Local).AddTicks(6378),
                            DiscountValue = 0m,
                            IsDelete = false,
                            OrderStatusId = "f1e884de-b62d-43ad-9ec1-6bfe13e9aadf",
                            PaymentStatusId = "f3288f36-e405-413f-baa3-5c232ea7bd3f",
                            PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SupplierId = "SUN0001"
                        },
                        new
                        {
                            Id = "PON0002",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryDate = new DateTime(2020, 9, 8, 12, 33, 33, 477, DateTimeKind.Local).AddTicks(9630),
                            DiscountValue = 0m,
                            IsDelete = false,
                            OrderStatusId = "0b243072-2e23-4397-81b5-cbf887b1d8d3",
                            PaymentStatusId = "0b710f3a-6426-4dff-89ec-afc9f154b668",
                            PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SupplierId = "SUN0002"
                        });
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.PurchaseOrderDetail", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("CostName")
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("ProductId")
                        .HasColumnType("varchar(12)");

                    b.Property<string>("PurchaseOrderId")
                        .HasColumnType("varchar(12)");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseOrderId");

                    b.ToTable("PurchaseOrderDetails");

                    b.HasData(
                        new
                        {
                            Id = "500b1862-90f3-48e4-a393-7d8d3a80d852",
                            ProductId = "PRN0001",
                            PurchaseOrderId = "PON0001",
                            Quantity = 100,
                            UnitPrice = 22500000m
                        },
                        new
                        {
                            Id = "d95faaa5-a7db-4182-be3e-705ea383761c",
                            ProductId = "PRN0002",
                            PurchaseOrderId = "PON0002",
                            Quantity = 50,
                            UnitPrice = 22500000m
                        });
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.ReceiptVoucher", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(12)");

                    b.Property<string>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(12)")
                        .HasDefaultValue(null);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("OrderId")
                        .HasColumnType("varchar(12)");

                    b.Property<string>("PaymentMethodId")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("Received")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime>("ReceivedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 9, 8, 12, 33, 33, 432, DateTimeKind.Local).AddTicks(1867));

                    b.Property<string>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(12)")
                        .HasDefaultValue(null);

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("SupplierId");

                    b.ToTable("ReceiptVouchers");

                    b.HasData(
                        new
                        {
                            Id = "RVN0001",
                            IsDelete = false,
                            OrderId = "ODN0001",
                            PaymentMethodId = "8eb1249d-277d-450c-a023-92f80fc31f7f",
                            Received = 22500000m,
                            ReceivedDate = new DateTime(2020, 9, 8, 12, 33, 33, 480, DateTimeKind.Local).AddTicks(205)
                        },
                        new
                        {
                            Id = "RVN0002",
                            IsDelete = false,
                            OrderId = "ODN0002",
                            PaymentMethodId = "8eb1249d-277d-450c-a023-92f80fc31f7f",
                            Received = 10500000m,
                            ReceivedDate = new DateTime(2020, 9, 8, 12, 33, 33, 480, DateTimeKind.Local).AddTicks(1824)
                        });
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.ShippingOrder", b =>
                {
                    b.Property<string>("OrderId")
                        .HasColumnType("varchar(12)");

                    b.Property<string>("ShippingId")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Address")
                        .HasColumnType("varchar(300)");

                    b.Property<string>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(12)")
                        .HasDefaultValue(null);

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 9, 8, 12, 33, 33, 440, DateTimeKind.Local).AddTicks(7869));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(250)");

                    b.Property<decimal>("Fee")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("ShippingStatusId")
                        .HasColumnType("char(36)");

                    b.Property<string>("TransporterId")
                        .HasColumnType("char(36)");

                    b.HasKey("OrderId", "ShippingId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ShippingStatusId");

                    b.HasIndex("TransporterId");

                    b.ToTable("ShippingOrders");
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.ShippingStatus", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("ShippingStatus");
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.Stock", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("varchar(12)");

                    b.Property<int>("AbleToSale")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("Inventory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("ProductId");

                    b.ToTable("Stocks");

                    b.HasData(
                        new
                        {
                            ProductId = "PRN0001",
                            AbleToSale = 99,
                            Inventory = 99
                        },
                        new
                        {
                            ProductId = "PRN0002",
                            AbleToSale = 49,
                            Inventory = 49
                        });
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.StockAction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("StockActions");

                    b.HasData(
                        new
                        {
                            Id = "d3a28127-b271-4280-b6d7-632b71248926",
                            Name = "Khởi tạo"
                        },
                        new
                        {
                            Id = "22a9ea7b-ecb4-4d3f-86a0-eb7129ceeb04",
                            Name = "Xuất kho giao hàng cho khách/shipper"
                        },
                        new
                        {
                            Id = "020cc73e-35b2-4012-8af9-2927fb5d04cf",
                            Name = "Nhập hàng vào kho"
                        },
                        new
                        {
                            Id = "1f4c4fb9-d6e5-4d8d-bfc2-f4627f8334cd",
                            Name = "Cân bằng kho"
                        });
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.StockHistory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("char(36)");

                    b.Property<int>("ChangeQuantity")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(12)")
                        .HasDefaultValue(null);

                    b.Property<string>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasDefaultValue(null);

                    b.Property<string>("ProductId")
                        .HasColumnType("varchar(12)");

                    b.Property<string>("PurchaseOrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasDefaultValue(null);

                    b.Property<DateTime>("RecordDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 9, 8, 12, 33, 33, 436, DateTimeKind.Local).AddTicks(1279));

                    b.Property<string>("StockActionId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("OrderDetailId")
                        .IsUnique()
                        .HasFilter("[OrderDetailId] IS NOT NULL");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseOrderDetailId")
                        .IsUnique()
                        .HasFilter("[PurchaseOrderDetailId] IS NOT NULL");

                    b.HasIndex("StockActionId");

                    b.ToTable("StockHistories");

                    b.HasData(
                        new
                        {
                            Id = "84ed9ad6-3a1e-4eba-95b9-ba99009301b0",
                            ChangeQuantity = 100,
                            EmployeeId = "EPN0001",
                            ProductId = "PRN0001",
                            PurchaseOrderDetailId = "500b1862-90f3-48e4-a393-7d8d3a80d852",
                            RecordDate = new DateTime(2020, 9, 8, 12, 33, 33, 480, DateTimeKind.Local).AddTicks(3736),
                            StockActionId = "d3a28127-b271-4280-b6d7-632b71248926"
                        },
                        new
                        {
                            Id = "9570d184-8b16-4ed0-8939-2a6a428ea18c",
                            ChangeQuantity = 50,
                            EmployeeId = "EPN0001",
                            ProductId = "PRN0002",
                            PurchaseOrderDetailId = "d95faaa5-a7db-4182-be3e-705ea383761c",
                            RecordDate = new DateTime(2020, 9, 8, 12, 33, 33, 480, DateTimeKind.Local).AddTicks(7041),
                            StockActionId = "d3a28127-b271-4280-b6d7-632b71248926"
                        },
                        new
                        {
                            Id = "6bb4f9d8-7df8-4b20-ad1f-f996be3f53ec",
                            ChangeQuantity = -1,
                            EmployeeId = "EPN0001",
                            OrderDetailId = "6e5c27aa-30b4-479e-8686-175094ed6c5b",
                            ProductId = "PRN0001",
                            RecordDate = new DateTime(2020, 9, 8, 12, 33, 33, 480, DateTimeKind.Local).AddTicks(7153),
                            StockActionId = "22a9ea7b-ecb4-4d3f-86a0-eb7129ceeb04"
                        },
                        new
                        {
                            Id = "948447ee-5eb3-4a08-afc6-cddc1fa7aa46",
                            ChangeQuantity = -1,
                            EmployeeId = "EPN0001",
                            OrderDetailId = "906a00ad-0fa9-48ef-ba51-e326d3f77ea1",
                            ProductId = "PRN0002",
                            RecordDate = new DateTime(2020, 9, 8, 12, 33, 33, 480, DateTimeKind.Local).AddTicks(8121),
                            StockActionId = "22a9ea7b-ecb4-4d3f-86a0-eb7129ceeb04"
                        });
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.Supplier", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(12)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(12)")
                        .HasDefaultValue(null);

                    b.Property<string>("Fax")
                        .HasColumnType("varchar(30)");

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Website")
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Suppliers");

                    b.HasData(
                        new
                        {
                            Id = "SUN0001",
                            Address = "Số 99, Hải Triều, Quán Toan, Hồng Bàng, Hải Phòng",
                            Email = "contyabc@gmail.com",
                            EmployeeId = "EPN0001",
                            Fax = "1234567890",
                            IsDelete = false,
                            Name = "Công ty TNHH ABC",
                            PhoneNumber = "1234567890",
                            Website = "abc.com.vn"
                        },
                        new
                        {
                            Id = "SUN0002",
                            Address = "Số 99, Hải Triều, Quán Toan, Hồng Bàng, Hải Phòng",
                            Email = "contyabc@gmail.com",
                            EmployeeId = "EPN0001",
                            Fax = "1234567890",
                            IsDelete = false,
                            Name = "Công ty TNHH DEF",
                            PhoneNumber = "1234567890",
                            Website = "abc.com.vn"
                        });
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.Transporter", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Transporters");

                    b.HasData(
                        new
                        {
                            Id = "9567c16b-bd65-4c45-8200-fc96c578c050",
                            Name = "Giao hàng nhanh",
                            PhoneNumber = "1234567890"
                        });
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.AppRole", b =>
                {
                    b.HasOne("eQACoLTD.Data.Entities.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId");
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.Cart", b =>
                {
                    b.HasOne("eQACoLTD.Data.Entities.Product", "Product")
                        .WithMany("Carts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eQACoLTD.Data.Entities.AppUser", "AppUser")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.Customer", b =>
                {
                    b.HasOne("eQACoLTD.Data.Entities.CustomerType", "CustomerType")
                        .WithMany("Customers")
                        .HasForeignKey("CustomerTypeId");

                    b.HasOne("eQACoLTD.Data.Entities.AppUser", "AppUser")
                        .WithOne("Customer")
                        .HasForeignKey("eQACoLTD.Data.Entities.Customer", "UserId");
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.Employee", b =>
                {
                    b.HasOne("eQACoLTD.Data.Entities.AppUser", "AppUser")
                        .WithOne("Employee")
                        .HasForeignKey("eQACoLTD.Data.Entities.Employee", "UserId");
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.Order", b =>
                {
                    b.HasOne("eQACoLTD.Data.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId");

                    b.HasOne("eQACoLTD.Data.Entities.DiscountType", "DiscountType")
                        .WithMany("Orders")
                        .HasForeignKey("DiscountTypeId");

                    b.HasOne("eQACoLTD.Data.Entities.OrderStatus", "OrderStatus")
                        .WithMany("Orders")
                        .HasForeignKey("OrderStatusId");

                    b.HasOne("eQACoLTD.Data.Entities.PaymentStatus", "PaymentStatus")
                        .WithMany("Orders")
                        .HasForeignKey("PaymentStatusId");
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.OrderDetail", b =>
                {
                    b.HasOne("eQACoLTD.Data.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId");

                    b.HasOne("eQACoLTD.Data.Entities.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.PaymentVoucher", b =>
                {
                    b.HasOne("eQACoLTD.Data.Entities.Customer", "Customer")
                        .WithMany("PaymentVouchers")
                        .HasForeignKey("CustomerId");

                    b.HasOne("eQACoLTD.Data.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany("PaymentVouchers")
                        .HasForeignKey("PaymentMethodId");

                    b.HasOne("eQACoLTD.Data.Entities.PurchaseOrder", "PurchaseOrder")
                        .WithMany("PaymentVouchers")
                        .HasForeignKey("PurchaseOrderId");

                    b.HasOne("eQACoLTD.Data.Entities.Supplier", "Supplier")
                        .WithMany("PaymentVouchers")
                        .HasForeignKey("SupplierId");
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.Product", b =>
                {
                    b.HasOne("eQACoLTD.Data.Entities.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId");

                    b.HasOne("eQACoLTD.Data.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId");
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.ProductImage", b =>
                {
                    b.HasOne("eQACoLTD.Data.Entities.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.ProductReview", b =>
                {
                    b.HasOne("eQACoLTD.Data.Entities.Product", "Product")
                        .WithMany("ProductReviews")
                        .HasForeignKey("ProductId");

                    b.HasOne("eQACoLTD.Data.Entities.AppUser", "AppUser")
                        .WithMany("ProductReviews")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.ProductReviewReply", b =>
                {
                    b.HasOne("eQACoLTD.Data.Entities.ProductReview", "ProductReview")
                        .WithMany("ProductReviewReplies")
                        .HasForeignKey("ProductReviewId");

                    b.HasOne("eQACoLTD.Data.Entities.AppUser", "AppUser")
                        .WithMany("ProductReviewReplies")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.PurchaseOrder", b =>
                {
                    b.HasOne("eQACoLTD.Data.Entities.DiscountType", "DiscountType")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("DiscountTypeId");

                    b.HasOne("eQACoLTD.Data.Entities.OrderStatus", "OrderStatus")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("OrderStatusId");

                    b.HasOne("eQACoLTD.Data.Entities.PaymentStatus", "PaymentStatus")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("PaymentStatusId");

                    b.HasOne("eQACoLTD.Data.Entities.Supplier", "Supplier")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("SupplierId");
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.PurchaseOrderDetail", b =>
                {
                    b.HasOne("eQACoLTD.Data.Entities.Product", "Product")
                        .WithMany("PurchaseOrderDetails")
                        .HasForeignKey("ProductId");

                    b.HasOne("eQACoLTD.Data.Entities.PurchaseOrder", "PurchaseOrder")
                        .WithMany("PurchaseOrderDetails")
                        .HasForeignKey("PurchaseOrderId");
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.ReceiptVoucher", b =>
                {
                    b.HasOne("eQACoLTD.Data.Entities.Customer", "Customer")
                        .WithMany("ReceiptVouchers")
                        .HasForeignKey("CustomerId");

                    b.HasOne("eQACoLTD.Data.Entities.Order", "Order")
                        .WithMany("ReceiptVouchers")
                        .HasForeignKey("OrderId");

                    b.HasOne("eQACoLTD.Data.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany("ReceiptVouchers")
                        .HasForeignKey("PaymentMethodId");

                    b.HasOne("eQACoLTD.Data.Entities.Supplier", "Supplier")
                        .WithMany("ReceiptVouchers")
                        .HasForeignKey("SupplierId");
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.ShippingOrder", b =>
                {
                    b.HasOne("eQACoLTD.Data.Entities.Customer", "Customer")
                        .WithMany("ShippingOrders")
                        .HasForeignKey("CustomerId");

                    b.HasOne("eQACoLTD.Data.Entities.Order", "Order")
                        .WithMany("ShippingOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eQACoLTD.Data.Entities.ShippingStatus", "ShippingStatus")
                        .WithMany("ShippingOrders")
                        .HasForeignKey("ShippingStatusId");

                    b.HasOne("eQACoLTD.Data.Entities.Transporter", "Transporter")
                        .WithMany("ShippingOrders")
                        .HasForeignKey("TransporterId");
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.Stock", b =>
                {
                    b.HasOne("eQACoLTD.Data.Entities.Product", "Product")
                        .WithOne("Stock")
                        .HasForeignKey("eQACoLTD.Data.Entities.Stock", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.StockHistory", b =>
                {
                    b.HasOne("eQACoLTD.Data.Entities.Employee", "Employee")
                        .WithMany("StockHistories")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("eQACoLTD.Data.Entities.OrderDetail", "OrderDetail")
                        .WithOne("StockHistory")
                        .HasForeignKey("eQACoLTD.Data.Entities.StockHistory", "OrderDetailId");

                    b.HasOne("eQACoLTD.Data.Entities.Product", "Product")
                        .WithMany("StockHistories")
                        .HasForeignKey("ProductId");

                    b.HasOne("eQACoLTD.Data.Entities.PurchaseOrderDetail", "PurchaseOrderDetail")
                        .WithOne("StockHistory")
                        .HasForeignKey("eQACoLTD.Data.Entities.StockHistory", "PurchaseOrderDetailId");

                    b.HasOne("eQACoLTD.Data.Entities.StockAction", "StockAction")
                        .WithMany("StockHistories")
                        .HasForeignKey("StockActionId");
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.Supplier", b =>
                {
                    b.HasOne("eQACoLTD.Data.Entities.Employee", "Employee")
                        .WithMany("Suppliers")
                        .HasForeignKey("EmployeeId");
                });
#pragma warning restore 612, 618
        }
    }
}
