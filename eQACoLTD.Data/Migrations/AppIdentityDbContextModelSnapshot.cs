// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eQACoLTD.Data.DBContext;

namespace eQACoLTD.Data.Migrations
{
    [DbContext(typeof(AppIdentityDbContext))]
    partial class AppIdentityDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AppRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AppUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("AppUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("8efe663c-677d-4bcf-bd59-3359d49bac87"),
                            RoleId = new Guid("4c6d9e27-83db-496c-8a5f-16e4d3157428")
                        },
                        new
                        {
                            UserId = new Guid("4715539a-9f13-4eb0-813b-74d9fda79ccb"),
                            RoleId = new Guid("b430434f-5cf8-45bc-b25c-e3b123f9e880")
                        },
                        new
                        {
                            UserId = new Guid("47a888f4-e5c8-4f07-bd00-fcc7bb531eb3"),
                            RoleId = new Guid("04e6d6da-4f72-4b5b-88b9-2b919a9c7b9b")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserTokens");
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("AppRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4c6d9e27-83db-496c-8a5f-16e4d3157428"),
                            ConcurrencyStamp = "8038e01c-976e-484a-94a1-31b2dc838990",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Quyền quản trị viên",
                            FromDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Administrator",
                            NormalizedName = "Administrator",
                            ToDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("04e6d6da-4f72-4b5b-88b9-2b919a9c7b9b"),
                            ConcurrencyStamp = "0b08ded1-0043-42b0-b451-1ea60cf988ab",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Quyền nhân viên kho",
                            FromDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "WarehouseStaff",
                            NormalizedName = "WarehouseStaff",
                            ToDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("8e06e692-467e-4003-a2de-ad4d3ca1dc6d"),
                            ConcurrencyStamp = "4601d24a-8e24-4630-8963-9571f190c898",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Quyền nhân viên lễ tân",
                            FromDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Receptionist",
                            NormalizedName = "Receptionist",
                            ToDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("b430434f-5cf8-45bc-b25c-e3b123f9e880"),
                            ConcurrencyStamp = "42f52957-e4cd-4f34-964a-ca4e1e7b4ef1",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Quyền nhân viên thu ngân",
                            FromDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Cashier",
                            NormalizedName = "Cashier",
                            ToDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 9, 17, 7, 6, 2, 714, DateTimeKind.Local).AddTicks(9179));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8efe663c-677d-4bcf-bd59-3359d49bac87"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d7a31986-2fbd-4f0a-a931-cba75d0bc593",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "dnguyen24498@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DNGUYEN24498@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEDmf1wHwhoDBaLUEgbIpPcBNGfhLZF/lDOiuGBLnuWbDlLQU4VwaKow2LCUg0oxK8w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = new Guid("4715539a-9f13-4eb0-813b-74d9fda79ccb"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8af7dd46-7e39-490e-81a5-6ac62076b9fc",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "duongnguyenadhp1@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DUONGNGUYENADHP1@GMAIL.COM",
                            NormalizedUserName = "EPN0001",
                            PasswordHash = "AQAAAAEAACcQAAAAENjPaMADilW0yqJEzCawN3/iv1AX5TJMOwLjfgmwB7T+odHDJzRcKeDDjHgr0i2HBQ==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "epn0001"
                        },
                        new
                        {
                            Id = new Guid("47a888f4-e5c8-4f07-bd00-fcc7bb531eb3"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "83cc0cb9-48d3-4510-ab7d-bcf5999eb241",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "duongnguyenadhp2@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DUONGNGUYENADHP2@GMAIL.COM",
                            NormalizedUserName = "epn0002",
                            PasswordHash = "AQAAAAEAACcQAAAAEOuDN+GSMQXUhu5CXHW968LYhxsHGJMHQdannj+9Y5aQqpKHupFxONZPimGu63FpTA==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "epn0002"
                        },
                        new
                        {
                            Id = new Guid("51098bea-63c8-4aba-8668-84562f5048a0"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "85f1bd56-4b41-4636-89ae-639888042fb6",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "duongnguyenadhp@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DUONGNGUYENADHP@GMAIL.COM",
                            NormalizedUserName = "cus0001",
                            PasswordHash = "AQAAAAEAACcQAAAAEGoeGZpSu10g/D66YuwHWkWq86cRQczioYXlGuDaJttAxbVOW74dimDebry+hVYVvQ==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "cus0001"
                        },
                        new
                        {
                            Id = new Guid("0ee1852e-6396-4f71-86b6-5741def7398b"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1fe1a570-86ca-426d-9d1b-ce5082907919",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "dophuongthao@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DOPHUONGTHAO@GMAIL.COM",
                            NormalizedUserName = "cus0002",
                            PasswordHash = "AQAAAAEAACcQAAAAEPYBVtRgC1wsTPk4i+7KjeJW/A5khZsiKQTjLfCuRQY9elRCPEcohsZNZtqOe7e1QA==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "cus0002"
                        });
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.Brand", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = "bedf848d-f7d0-433f-98f1-2731067335af",
                            Name = "Apple"
                        },
                        new
                        {
                            Id = "b693eb5a-e457-447c-9e29-48f438703780",
                            Name = "Dell"
                        },
                        new
                        {
                            Id = "9d07f19f-afd8-408d-872e-d99331031c59",
                            Name = "HP"
                        });
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.Cart", b =>
                {
                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductId")
                        .HasColumnType("varchar(12)");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("UserId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ThumbnailImagePath")
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = "3db32842-3ed5-458b-ad96-a113d73775ee",
                            Name = "Laptop"
                        },
                        new
                        {
                            Id = "58060083-6e76-4dea-ba20-0e332ec96122",
                            Name = "PC"
                        });
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.Customer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(12)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("AvatarPath")
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("CustomerTypeId")
                        .HasColumnType("char(36)");

                    b.Property<string>("DefaultPhoneNumber")
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("Dob")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool?>("Gender")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CustomerTypeId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = "CUS0001",
                            Address = "Số 99, Hải Triều, Số 99, Hải Triều, Quán Toan, Hồng Bàng, Hải Phòng",
                            CustomerTypeId = "4f2b5d2b-99c0-45a7-abb8-2316e804da63",
                            Dob = new DateTime(1998, 4, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FullName = "Bùi Thùy Dương",
                            Gender = false,
                            IsDelete = false,
                            UserId = new Guid("51098bea-63c8-4aba-8668-84562f5048a0")
                        },
                        new
                        {
                            Id = "CUS0002",
                            Address = "Số 99, Hải Triều, Số 99, Hải Triều, Quán Toan, Hồng Bàng, Hải Phòng",
                            CustomerTypeId = "4f2b5d2b-99c0-45a7-abb8-2316e804da63",
                            Dob = new DateTime(1998, 4, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FullName = "Đỗ Phương Thảo",
                            Gender = false,
                            IsDelete = false,
                            UserId = new Guid("0ee1852e-6396-4f71-86b6-5741def7398b")
                        });
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.CustomerType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 9, 17, 7, 6, 2, 724, DateTimeKind.Local).AddTicks(4460));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("CustomerTypes");

                    b.HasData(
                        new
                        {
                            Id = "4f2b5d2b-99c0-45a7-abb8-2316e804da63",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Bán lẻ"
                        },
                        new
                        {
                            Id = "3daf45ee-395b-48c7-a790-247b372d1746",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Bán buôn"
                        });
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.DiscountType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("DiscountTypes");

                    b.HasData(
                        new
                        {
                            Id = "0d3c8b87-8010-491b-9867-84805888d937",
                            Name = "Phần trăm"
                        },
                        new
                        {
                            Id = "35d3f8e6-4c28-4315-8e98-5ea957c847c2",
                            Name = "Tiền mặt"
                        });
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.Employee", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(12)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("AvatarPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DefaultPhoneNumber")
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("Dob")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool?>("Gender")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = "EPN0001",
                            Address = "Số 88, Hải Triều, Số 99, Hải Triều, Quán Toan, Hồng Bàng, Hải Phòng",
                            DefaultPhoneNumber = "0123456789",
                            Dob = new DateTime(1998, 4, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FullName = "Nguyễn Dương Nguyên",
                            Gender = true,
                            IsDelete = false,
                            UserId = new Guid("4715539a-9f13-4eb0-813b-74d9fda79ccb")
                        },
                        new
                        {
                            Id = "EPN0002",
                            Address = "Số 99, Hải Triều, Số 99, Hải Triều, Quán Toan, Hồng Bàng, Hải Phòng",
                            DefaultPhoneNumber = "0123456789",
                            Dob = new DateTime(1998, 4, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FullName = "Bùi Thùy Dương",
                            Gender = false,
                            IsDelete = false,
                            UserId = new Guid("47a888f4-e5c8-4f07-bd00-fcc7bb531eb3")
                        });
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(12)");

                    b.Property<string>("CustomerId")
                        .HasColumnType("varchar(12)");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 9, 17, 7, 6, 2, 771, DateTimeKind.Local).AddTicks(8124));

                    b.Property<string>("DiscountDescription")
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("DiscountTypeId")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("DiscountValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal")
                        .HasDefaultValue(0m);

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("OrderStatusId")
                        .HasColumnType("char(36)");

                    b.Property<string>("PaymentStatusId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DiscountTypeId");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("PaymentStatusId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = "ODN0001",
                            CustomerId = "CUS0001",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DiscountValue = 0m,
                            IsDelete = false,
                            OrderStatusId = "80b1a453-82a4-47ed-964e-1b69af87a1e1",
                            PaymentStatusId = "646233ce-0eb0-4ed1-a5c6-8e16e1376393"
                        },
                        new
                        {
                            Id = "ODN0002",
                            CustomerId = "CUS0002",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DiscountValue = 0m,
                            IsDelete = false,
                            OrderStatusId = "43972588-ea79-4bf0-8ed7-7e9ef42170a7",
                            PaymentStatusId = "6187b25a-957c-4690-ba99-f64499119f35"
                        });
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.OrderDetail", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("OrderId")
                        .HasColumnType("varchar(12)");

                    b.Property<string>("ProductId")
                        .HasColumnType("varchar(12)");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("ServiceName")
                        .HasColumnType("nvarchar(300)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");

                    b.HasData(
                        new
                        {
                            Id = "7c2139ae-ee0b-4e6a-9c48-32428fc4c032",
                            OrderId = "ODN0001",
                            ProductId = "PRN0001",
                            Quantity = 1,
                            UnitPrice = 22500000m
                        },
                        new
                        {
                            Id = "27f6e5e9-a08c-4470-849b-20b9bc3cef39",
                            OrderId = "ODN0002",
                            ProductId = "PRN0002",
                            Quantity = 1,
                            UnitPrice = 22500000m
                        });
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.OrderStatus", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("OrderStatuses");

                    b.HasData(
                        new
                        {
                            Id = "75d76ab9-5e0e-4b42-8bdc-7e3c5d4904a1",
                            Name = "Đặt hàng"
                        },
                        new
                        {
                            Id = "43972588-ea79-4bf0-8ed7-7e9ef42170a7",
                            Name = "Đang giao dịch"
                        },
                        new
                        {
                            Id = "80b1a453-82a4-47ed-964e-1b69af87a1e1",
                            Name = "Hoàn thành"
                        },
                        new
                        {
                            Id = "537d8259-b206-496a-8a85-29f76539301b",
                            Name = "Kết thúc"
                        },
                        new
                        {
                            Id = "940195d2-885c-45aa-af98-17ad7549f90a",
                            Name = "Đã hủy"
                        });
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.PaymentMethod", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods");

                    b.HasData(
                        new
                        {
                            Id = "a2b931dd-c5be-47c5-a134-f9f3474cf630",
                            Name = "Tiền mặt"
                        },
                        new
                        {
                            Id = "2107adeb-7574-4f62-a898-22b79b67ee62",
                            Name = "Quẹt thẻ"
                        },
                        new
                        {
                            Id = "f859d3ef-13e6-411b-b701-d5d643524653",
                            Name = "Chuyển khoản"
                        });
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.PaymentStatus", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("PaymentStatuses");

                    b.HasData(
                        new
                        {
                            Id = "57fa4d1a-974a-4157-bd6c-287db184a51e",
                            Name = "Chưa thanh toán"
                        },
                        new
                        {
                            Id = "6187b25a-957c-4690-ba99-f64499119f35",
                            Name = "Thanh toán một phần"
                        },
                        new
                        {
                            Id = "646233ce-0eb0-4ed1-a5c6-8e16e1376393",
                            Name = "Đã thanh toán"
                        });
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.PaymentVoucher", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(12)");

                    b.Property<string>("CustomerId")
                        .HasColumnType("varchar(12)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<decimal>("Paid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PayDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 9, 17, 7, 6, 2, 767, DateTimeKind.Local).AddTicks(1490));

                    b.Property<string>("PaymentMethodId")
                        .HasColumnType("char(36)");

                    b.Property<string>("PurchaseOrderId")
                        .HasColumnType("varchar(12)");

                    b.Property<string>("SupplierId")
                        .HasColumnType("varchar(12)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("PurchaseOrderId");

                    b.HasIndex("SupplierId");

                    b.ToTable("PaymentVouchers");

                    b.HasData(
                        new
                        {
                            Id = "PVN0001",
                            IsDelete = false,
                            Paid = 2250000000m,
                            PayDate = new DateTime(2020, 9, 17, 7, 6, 2, 812, DateTimeKind.Local).AddTicks(286),
                            PaymentMethodId = "a2b931dd-c5be-47c5-a134-f9f3474cf630",
                            PurchaseOrderId = "PON0001"
                        },
                        new
                        {
                            Id = "PVN0002",
                            IsDelete = false,
                            Paid = 500000000m,
                            PayDate = new DateTime(2020, 9, 17, 7, 6, 2, 812, DateTimeKind.Local).AddTicks(1108),
                            PaymentMethodId = "a2b931dd-c5be-47c5-a134-f9f3474cf630",
                            PurchaseOrderId = "PON0002"
                        });
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(12)");

                    b.Property<string>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasDefaultValue(null);

                    b.Property<string>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasDefaultValue(null);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Information")
                        .HasColumnType("nvarchar(600)");

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("RetailPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<byte>("StarScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1);

                    b.Property<int>("Views")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<byte>("WarrantyPeriod")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)0);

                    b.Property<decimal>("WholesalePrices")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = "PRN0001",
                            BrandId = "bedf848d-f7d0-433f-98f1-2731067335af",
                            CategoryId = "3db32842-3ed5-458b-ad96-a113d73775ee",
                            IsDelete = false,
                            Name = "Macbook Pro 2020",
                            RetailPrice = 22500000m,
                            StarScore = (byte)1,
                            Views = 1340,
                            WarrantyPeriod = (byte)36,
                            WholesalePrices = 21500000m
                        },
                        new
                        {
                            Id = "PRN0002",
                            BrandId = "bedf848d-f7d0-433f-98f1-2731067335af",
                            CategoryId = "3db32842-3ed5-458b-ad96-a113d73775ee",
                            IsDelete = false,
                            Name = "Macbook Air 2020",
                            RetailPrice = 20500000m,
                            StarScore = (byte)1,
                            Views = 1340,
                            WarrantyPeriod = (byte)36,
                            WholesalePrices = 20000000m
                        });
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.ProductImage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("FullPath")
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsThumbnail")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ProductId")
                        .HasColumnType("varchar(12)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.ProductReview", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ProductId")
                        .HasColumnType("varchar(12)");

                    b.Property<byte>("StarScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1);

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("ProductReviews");
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.ProductReviewReply", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ProductReviewId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductReviewId");

                    b.HasIndex("UserId");

                    b.ToTable("ProductReviewReplies");
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.PurchaseOrder", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(12)");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 9, 17, 7, 6, 2, 762, DateTimeKind.Local).AddTicks(867));

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DiscountDescription")
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("DiscountTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasDefaultValue(null);

                    b.Property<decimal>("DiscountValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal")
                        .HasDefaultValue(0m);

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("OrderStatusId")
                        .HasColumnType("char(36)");

                    b.Property<string>("PaymentStatusId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("PurchaseDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 9, 17, 7, 6, 2, 762, DateTimeKind.Local).AddTicks(1226));

                    b.Property<string>("SupplierId")
                        .HasColumnType("varchar(12)");

                    b.HasKey("Id");

                    b.HasIndex("DiscountTypeId");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("PaymentStatusId");

                    b.HasIndex("SupplierId");

                    b.ToTable("PurchaseOrders");

                    b.HasData(
                        new
                        {
                            Id = "PON0001",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryDate = new DateTime(2020, 9, 17, 7, 6, 2, 811, DateTimeKind.Local).AddTicks(5419),
                            DiscountValue = 0m,
                            IsDelete = false,
                            OrderStatusId = "80b1a453-82a4-47ed-964e-1b69af87a1e1",
                            PaymentStatusId = "646233ce-0eb0-4ed1-a5c6-8e16e1376393",
                            PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SupplierId = "SUN0001"
                        },
                        new
                        {
                            Id = "PON0002",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryDate = new DateTime(2020, 9, 17, 7, 6, 2, 811, DateTimeKind.Local).AddTicks(6224),
                            DiscountValue = 0m,
                            IsDelete = false,
                            OrderStatusId = "43972588-ea79-4bf0-8ed7-7e9ef42170a7",
                            PaymentStatusId = "6187b25a-957c-4690-ba99-f64499119f35",
                            PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SupplierId = "SUN0002"
                        });
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.PurchaseOrderDetail", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("CostName")
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("ProductId")
                        .HasColumnType("varchar(12)");

                    b.Property<string>("PurchaseOrderId")
                        .HasColumnType("varchar(12)");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseOrderId");

                    b.ToTable("PurchaseOrderDetails");

                    b.HasData(
                        new
                        {
                            Id = "3d4684a8-dcfb-4a43-8fc9-5ea256134bd8",
                            ProductId = "PRN0001",
                            PurchaseOrderId = "PON0001",
                            Quantity = 100,
                            UnitPrice = 22500000m
                        },
                        new
                        {
                            Id = "33b88cf1-6ce0-4ffe-bc08-bf5d2caf97dc",
                            ProductId = "PRN0002",
                            PurchaseOrderId = "PON0002",
                            Quantity = 50,
                            UnitPrice = 22500000m
                        });
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.ReceiptVoucher", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(12)");

                    b.Property<string>("CustomerId")
                        .HasColumnType("varchar(12)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("OrderId")
                        .HasColumnType("varchar(12)");

                    b.Property<string>("PaymentMethodId")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("Received")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime>("ReceivedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 9, 17, 7, 6, 2, 777, DateTimeKind.Local).AddTicks(581));

                    b.Property<string>("SupplierId")
                        .HasColumnType("varchar(12)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("SupplierId");

                    b.ToTable("ReceiptVouchers");

                    b.HasData(
                        new
                        {
                            Id = "RVN0001",
                            IsDelete = false,
                            OrderId = "ODN0001",
                            PaymentMethodId = "a2b931dd-c5be-47c5-a134-f9f3474cf630",
                            Received = 22500000m,
                            ReceivedDate = new DateTime(2020, 9, 17, 7, 6, 2, 812, DateTimeKind.Local).AddTicks(7456)
                        },
                        new
                        {
                            Id = "RVN0002",
                            IsDelete = false,
                            OrderId = "ODN0002",
                            PaymentMethodId = "a2b931dd-c5be-47c5-a134-f9f3474cf630",
                            Received = 10500000m,
                            ReceivedDate = new DateTime(2020, 9, 17, 7, 6, 2, 812, DateTimeKind.Local).AddTicks(8049)
                        });
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.ShippingOrder", b =>
                {
                    b.Property<string>("OrderId")
                        .HasColumnType("varchar(12)");

                    b.Property<string>("ShippingId")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Address")
                        .HasColumnType("varchar(300)");

                    b.Property<string>("CustomerId")
                        .HasColumnType("varchar(12)");

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 9, 17, 7, 6, 2, 784, DateTimeKind.Local).AddTicks(4756));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("Fee")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("ShippingStatusId")
                        .HasColumnType("char(36)");

                    b.Property<string>("TransporterId")
                        .HasColumnType("char(36)");

                    b.HasKey("OrderId", "ShippingId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ShippingStatusId");

                    b.HasIndex("TransporterId");

                    b.ToTable("ShippingOrders");
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.ShippingStatus", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("ShippingStatus");
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.Stock", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("varchar(12)");

                    b.Property<int>("AbleToSale")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("Inventory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("ProductId");

                    b.ToTable("Stocks");

                    b.HasData(
                        new
                        {
                            ProductId = "PRN0001",
                            AbleToSale = 99,
                            Inventory = 99
                        },
                        new
                        {
                            ProductId = "PRN0002",
                            AbleToSale = 49,
                            Inventory = 49
                        });
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.StockAction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("StockActions");

                    b.HasData(
                        new
                        {
                            Id = "d6f2e2be-d9d4-40bf-b872-1c5d747466c9",
                            Name = "Khởi tạo"
                        },
                        new
                        {
                            Id = "1be88fef-0b15-4429-9012-9771a6e849f1",
                            Name = "Xuất kho giao hàng cho khách/shipper"
                        },
                        new
                        {
                            Id = "0a12a679-0952-414f-a1e6-990b34f1be07",
                            Name = "Nhập hàng vào kho"
                        },
                        new
                        {
                            Id = "a8ef7eae-3fad-4711-a4f0-8b5b7e5084af",
                            Name = "Cân bằng kho"
                        });
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.StockHistory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("char(36)");

                    b.Property<int>("ChangeQuantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("EmployeeId")
                        .HasColumnType("varchar(12)");

                    b.Property<string>("OrderDetailId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ProductId")
                        .HasColumnType("varchar(12)");

                    b.Property<string>("PurchaseOrderDetailId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("RecordDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 9, 17, 7, 6, 2, 780, DateTimeKind.Local).AddTicks(3306));

                    b.Property<string>("StockActionId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("OrderDetailId")
                        .IsUnique()
                        .HasFilter("[OrderDetailId] IS NOT NULL");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseOrderDetailId")
                        .IsUnique()
                        .HasFilter("[PurchaseOrderDetailId] IS NOT NULL");

                    b.HasIndex("StockActionId");

                    b.ToTable("StockHistories");

                    b.HasData(
                        new
                        {
                            Id = "b9b095eb-0974-4aac-bee4-5358c2401b99",
                            ChangeQuantity = 100,
                            EmployeeId = "EPN0001",
                            ProductId = "PRN0001",
                            PurchaseOrderDetailId = "3d4684a8-dcfb-4a43-8fc9-5ea256134bd8",
                            RecordDate = new DateTime(2020, 9, 17, 7, 6, 2, 812, DateTimeKind.Local).AddTicks(9085),
                            StockActionId = "d6f2e2be-d9d4-40bf-b872-1c5d747466c9"
                        },
                        new
                        {
                            Id = "deef8666-a71c-4441-be9d-315e99353a8d",
                            ChangeQuantity = 50,
                            EmployeeId = "EPN0001",
                            ProductId = "PRN0002",
                            PurchaseOrderDetailId = "33b88cf1-6ce0-4ffe-bc08-bf5d2caf97dc",
                            RecordDate = new DateTime(2020, 9, 17, 7, 6, 2, 813, DateTimeKind.Local).AddTicks(1025),
                            StockActionId = "d6f2e2be-d9d4-40bf-b872-1c5d747466c9"
                        },
                        new
                        {
                            Id = "849765e2-31a4-486b-8da4-cb8521c3f370",
                            ChangeQuantity = -1,
                            EmployeeId = "EPN0001",
                            OrderDetailId = "7c2139ae-ee0b-4e6a-9c48-32428fc4c032",
                            ProductId = "PRN0001",
                            RecordDate = new DateTime(2020, 9, 17, 7, 6, 2, 813, DateTimeKind.Local).AddTicks(1076),
                            StockActionId = "1be88fef-0b15-4429-9012-9771a6e849f1"
                        },
                        new
                        {
                            Id = "332469da-fa27-4d84-8bf8-a1da22e68d18",
                            ChangeQuantity = -1,
                            EmployeeId = "EPN0001",
                            OrderDetailId = "27f6e5e9-a08c-4470-849b-20b9bc3cef39",
                            ProductId = "PRN0002",
                            RecordDate = new DateTime(2020, 9, 17, 7, 6, 2, 813, DateTimeKind.Local).AddTicks(1559),
                            StockActionId = "1be88fef-0b15-4429-9012-9771a6e849f1"
                        });
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.Supplier", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(12)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(12)")
                        .HasDefaultValue(null);

                    b.Property<string>("Fax")
                        .HasColumnType("varchar(30)");

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Website")
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Suppliers");

                    b.HasData(
                        new
                        {
                            Id = "SUN0001",
                            Address = "Số 99, Hải Triều, Quán Toan, Hồng Bàng, Hải Phòng",
                            Email = "contyabc@gmail.com",
                            EmployeeId = "EPN0001",
                            Fax = "1234567890",
                            IsDelete = false,
                            Name = "Công ty TNHH ABC",
                            PhoneNumber = "1234567890",
                            Website = "abc.com.vn"
                        },
                        new
                        {
                            Id = "SUN0002",
                            Address = "Số 99, Hải Triều, Quán Toan, Hồng Bàng, Hải Phòng",
                            Email = "contyabc@gmail.com",
                            EmployeeId = "EPN0001",
                            Fax = "1234567890",
                            IsDelete = false,
                            Name = "Công ty TNHH DEF",
                            PhoneNumber = "1234567890",
                            Website = "abc.com.vn"
                        });
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.Transporter", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Transporters");

                    b.HasData(
                        new
                        {
                            Id = "be2ba488-7bf5-491d-ac72-15d3d4c50c05",
                            Name = "Giao hàng nhanh",
                            PhoneNumber = "1234567890"
                        });
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.AppRole", b =>
                {
                    b.HasOne("eQACoLTD.Data.Entities.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId");
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.Cart", b =>
                {
                    b.HasOne("eQACoLTD.Data.Entities.Product", "Product")
                        .WithMany("Carts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eQACoLTD.Data.Entities.AppUser", "AppUser")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.Customer", b =>
                {
                    b.HasOne("eQACoLTD.Data.Entities.CustomerType", "CustomerType")
                        .WithMany("Customers")
                        .HasForeignKey("CustomerTypeId");

                    b.HasOne("eQACoLTD.Data.Entities.AppUser", "AppUser")
                        .WithOne("Customer")
                        .HasForeignKey("eQACoLTD.Data.Entities.Customer", "UserId");
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.Employee", b =>
                {
                    b.HasOne("eQACoLTD.Data.Entities.AppUser", "AppUser")
                        .WithOne("Employee")
                        .HasForeignKey("eQACoLTD.Data.Entities.Employee", "UserId");
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.Order", b =>
                {
                    b.HasOne("eQACoLTD.Data.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId");

                    b.HasOne("eQACoLTD.Data.Entities.DiscountType", "DiscountType")
                        .WithMany("Orders")
                        .HasForeignKey("DiscountTypeId");

                    b.HasOne("eQACoLTD.Data.Entities.OrderStatus", "OrderStatus")
                        .WithMany("Orders")
                        .HasForeignKey("OrderStatusId");

                    b.HasOne("eQACoLTD.Data.Entities.PaymentStatus", "PaymentStatus")
                        .WithMany("Orders")
                        .HasForeignKey("PaymentStatusId");
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.OrderDetail", b =>
                {
                    b.HasOne("eQACoLTD.Data.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId");

                    b.HasOne("eQACoLTD.Data.Entities.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.PaymentVoucher", b =>
                {
                    b.HasOne("eQACoLTD.Data.Entities.Customer", "Customer")
                        .WithMany("PaymentVouchers")
                        .HasForeignKey("CustomerId");

                    b.HasOne("eQACoLTD.Data.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany("PaymentVouchers")
                        .HasForeignKey("PaymentMethodId");

                    b.HasOne("eQACoLTD.Data.Entities.PurchaseOrder", "PurchaseOrder")
                        .WithMany("PaymentVouchers")
                        .HasForeignKey("PurchaseOrderId");

                    b.HasOne("eQACoLTD.Data.Entities.Supplier", "Supplier")
                        .WithMany("PaymentVouchers")
                        .HasForeignKey("SupplierId");
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.Product", b =>
                {
                    b.HasOne("eQACoLTD.Data.Entities.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId");

                    b.HasOne("eQACoLTD.Data.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId");
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.ProductImage", b =>
                {
                    b.HasOne("eQACoLTD.Data.Entities.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.ProductReview", b =>
                {
                    b.HasOne("eQACoLTD.Data.Entities.Product", "Product")
                        .WithMany("ProductReviews")
                        .HasForeignKey("ProductId");

                    b.HasOne("eQACoLTD.Data.Entities.AppUser", "AppUser")
                        .WithMany("ProductReviews")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.ProductReviewReply", b =>
                {
                    b.HasOne("eQACoLTD.Data.Entities.ProductReview", "ProductReview")
                        .WithMany("ProductReviewReplies")
                        .HasForeignKey("ProductReviewId");

                    b.HasOne("eQACoLTD.Data.Entities.AppUser", "AppUser")
                        .WithMany("ProductReviewReplies")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.PurchaseOrder", b =>
                {
                    b.HasOne("eQACoLTD.Data.Entities.DiscountType", "DiscountType")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("DiscountTypeId");

                    b.HasOne("eQACoLTD.Data.Entities.OrderStatus", "OrderStatus")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("OrderStatusId");

                    b.HasOne("eQACoLTD.Data.Entities.PaymentStatus", "PaymentStatus")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("PaymentStatusId");

                    b.HasOne("eQACoLTD.Data.Entities.Supplier", "Supplier")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("SupplierId");
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.PurchaseOrderDetail", b =>
                {
                    b.HasOne("eQACoLTD.Data.Entities.Product", "Product")
                        .WithMany("PurchaseOrderDetails")
                        .HasForeignKey("ProductId");

                    b.HasOne("eQACoLTD.Data.Entities.PurchaseOrder", "PurchaseOrder")
                        .WithMany("PurchaseOrderDetails")
                        .HasForeignKey("PurchaseOrderId");
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.ReceiptVoucher", b =>
                {
                    b.HasOne("eQACoLTD.Data.Entities.Customer", "Customer")
                        .WithMany("ReceiptVouchers")
                        .HasForeignKey("CustomerId");

                    b.HasOne("eQACoLTD.Data.Entities.Order", "Order")
                        .WithMany("ReceiptVouchers")
                        .HasForeignKey("OrderId");

                    b.HasOne("eQACoLTD.Data.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany("ReceiptVouchers")
                        .HasForeignKey("PaymentMethodId");

                    b.HasOne("eQACoLTD.Data.Entities.Supplier", "Supplier")
                        .WithMany("ReceiptVouchers")
                        .HasForeignKey("SupplierId");
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.ShippingOrder", b =>
                {
                    b.HasOne("eQACoLTD.Data.Entities.Customer", "Customer")
                        .WithMany("ShippingOrders")
                        .HasForeignKey("CustomerId");

                    b.HasOne("eQACoLTD.Data.Entities.Order", "Order")
                        .WithMany("ShippingOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eQACoLTD.Data.Entities.ShippingStatus", "ShippingStatus")
                        .WithMany("ShippingOrders")
                        .HasForeignKey("ShippingStatusId");

                    b.HasOne("eQACoLTD.Data.Entities.Transporter", "Transporter")
                        .WithMany("ShippingOrders")
                        .HasForeignKey("TransporterId");
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.Stock", b =>
                {
                    b.HasOne("eQACoLTD.Data.Entities.Product", "Product")
                        .WithOne("Stock")
                        .HasForeignKey("eQACoLTD.Data.Entities.Stock", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.StockHistory", b =>
                {
                    b.HasOne("eQACoLTD.Data.Entities.Employee", "Employee")
                        .WithMany("StockHistories")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("eQACoLTD.Data.Entities.OrderDetail", "OrderDetail")
                        .WithOne("StockHistory")
                        .HasForeignKey("eQACoLTD.Data.Entities.StockHistory", "OrderDetailId");

                    b.HasOne("eQACoLTD.Data.Entities.Product", "Product")
                        .WithMany("StockHistories")
                        .HasForeignKey("ProductId");

                    b.HasOne("eQACoLTD.Data.Entities.PurchaseOrderDetail", "PurchaseOrderDetail")
                        .WithOne("StockHistory")
                        .HasForeignKey("eQACoLTD.Data.Entities.StockHistory", "PurchaseOrderDetailId");

                    b.HasOne("eQACoLTD.Data.Entities.StockAction", "StockAction")
                        .WithMany("StockHistories")
                        .HasForeignKey("StockActionId");
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.Supplier", b =>
                {
                    b.HasOne("eQACoLTD.Data.Entities.Employee", "Employee")
                        .WithMany("Suppliers")
                        .HasForeignKey("EmployeeId");
                });
#pragma warning restore 612, 618
        }
    }
}
