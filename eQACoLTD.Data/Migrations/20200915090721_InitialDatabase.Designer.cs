// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eQACoLTD.Data.DBContext;

namespace eQACoLTD.Data.Migrations
{
    [DbContext(typeof(AppIdentityDbContext))]
    [Migration("20200915090721_InitialDatabase")]
    partial class InitialDatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AppRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AppUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("AppUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("70865900-5fec-4335-9d27-423603ccef2a"),
                            RoleId = new Guid("55940568-a208-4b64-b4f3-68eba44d0613")
                        },
                        new
                        {
                            UserId = new Guid("33250e7f-d560-49f6-b106-719ed5e2424b"),
                            RoleId = new Guid("2758c11e-6a38-4d52-a70a-a10704d68d77")
                        },
                        new
                        {
                            UserId = new Guid("1398395b-ddf5-4afe-8e04-7e1da15b9a08"),
                            RoleId = new Guid("fbda1a18-e054-4fe5-8a6a-c16250021a2a")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserTokens");
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("AppRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("55940568-a208-4b64-b4f3-68eba44d0613"),
                            ConcurrencyStamp = "2e28e684-7f73-4e07-b519-5147531577f5",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Quyền quản trị viên",
                            FromDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Administrator",
                            NormalizedName = "Administrator",
                            ToDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("fbda1a18-e054-4fe5-8a6a-c16250021a2a"),
                            ConcurrencyStamp = "f56d7daa-147c-48cc-889d-c651ef7dcdc5",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Quyền nhân viên kho",
                            FromDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "WarehouseStaff",
                            NormalizedName = "WarehouseStaff",
                            ToDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("825c118f-47db-49ff-b66e-83ba00824435"),
                            ConcurrencyStamp = "b96abfd0-392d-4ced-9cb8-c783ba61b97a",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Quyền nhân viên lễ tân",
                            FromDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Receptionist",
                            NormalizedName = "Receptionist",
                            ToDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("2758c11e-6a38-4d52-a70a-a10704d68d77"),
                            ConcurrencyStamp = "fd2a92f2-c3a0-4941-ad3c-c28811f1d5d1",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Quyền nhân viên thu ngân",
                            FromDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Cashier",
                            NormalizedName = "Cashier",
                            ToDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 9, 15, 16, 7, 19, 950, DateTimeKind.Local).AddTicks(4345));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("70865900-5fec-4335-9d27-423603ccef2a"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9e0c7824-ec50-46b8-907c-898ad1ef7ffa",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "dnguyen24498@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DNGUYEN24498@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEEXhDrLxWl3nlmMDo6HhNZnJ9T+JvjMqk485sV1ca1pCwsfpH5ylcwzZpSiZDhvK4w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = new Guid("33250e7f-d560-49f6-b106-719ed5e2424b"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "34a7668f-15a9-4628-b486-b5960fc236d5",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "duongnguyenadhp1@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DUONGNGUYENADHP1@GMAIL.COM",
                            NormalizedUserName = "EPN0001",
                            PasswordHash = "AQAAAAEAACcQAAAAEGknTbpL5xZh1ZP8FJZUtiWOeAUem1ZqIsh+Jh/n+sXHL4tGWvRVyPBivYexOZ5Fog==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "epn0001"
                        },
                        new
                        {
                            Id = new Guid("1398395b-ddf5-4afe-8e04-7e1da15b9a08"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7001a433-469a-4d14-9cea-2f6b918d77e2",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "duongnguyenadhp2@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DUONGNGUYENADHP2@GMAIL.COM",
                            NormalizedUserName = "epn0002",
                            PasswordHash = "AQAAAAEAACcQAAAAEGiLiPwRDuck3uOfluLBugdvihM+xmkzU17Z2XsMi9kwyuAZCnUQATd4xCYpMGrL2A==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "epn0002"
                        },
                        new
                        {
                            Id = new Guid("995aed19-a0ce-4c11-b6c1-5417f74a4c30"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bcd8d2f6-a067-47fe-922a-a8c166627df1",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "duongnguyenadhp@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DUONGNGUYENADHP@GMAIL.COM",
                            NormalizedUserName = "cus0001",
                            PasswordHash = "AQAAAAEAACcQAAAAEFbucXEeNrDU9d+48JXn042JwZACpc4m3NHuVbtrstd1gbFveRbRS7CKBjJnq8Z35A==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "cus0001"
                        },
                        new
                        {
                            Id = new Guid("3fa33d4f-8850-418b-98c5-f01607424632"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "144c2ff8-79df-47bb-ad67-6db2fb2bb1ff",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "dophuongthao@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DOPHUONGTHAO@GMAIL.COM",
                            NormalizedUserName = "cus0002",
                            PasswordHash = "AQAAAAEAACcQAAAAEBwjFdjJ0fzNBGcPywNpxcA12lotGJDhL473nr/AJW5m9ElkB3M+TY5j5KC7Iaf0KQ==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "cus0002"
                        });
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.Brand", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = "5e8cf27f-cfc6-437b-a01b-a96805f4e202",
                            Name = "Apple"
                        },
                        new
                        {
                            Id = "277cff37-6614-454b-bda4-fe12848c54ec",
                            Name = "Dell"
                        },
                        new
                        {
                            Id = "e015e8fa-5f72-4529-8a93-6ed57a6af4aa",
                            Name = "HP"
                        });
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.Cart", b =>
                {
                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductId")
                        .HasColumnType("varchar(12)");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("UserId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ThumbnailImagePath")
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = "215cf0eb-e27d-455b-9db9-d11520dc76bb",
                            Name = "Laptop"
                        },
                        new
                        {
                            Id = "36050e28-44f2-4756-91c4-40d7ebe1036c",
                            Name = "PC"
                        });
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.Customer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(12)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("AvatarPath")
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("CustomerTypeId")
                        .HasColumnType("char(36)");

                    b.Property<string>("DefaultPhoneNumber")
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("Dob")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool?>("Gender")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CustomerTypeId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = "CUS0001",
                            Address = "Số 99, Hải Triều, Số 99, Hải Triều, Quán Toan, Hồng Bàng, Hải Phòng",
                            CustomerTypeId = "66da40a6-f289-4c86-aac4-72ddb9adae3d",
                            Dob = new DateTime(1998, 4, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FullName = "Bùi Thùy Dương",
                            Gender = false,
                            IsDelete = false,
                            UserId = new Guid("995aed19-a0ce-4c11-b6c1-5417f74a4c30")
                        },
                        new
                        {
                            Id = "CUS0002",
                            Address = "Số 99, Hải Triều, Số 99, Hải Triều, Quán Toan, Hồng Bàng, Hải Phòng",
                            CustomerTypeId = "66da40a6-f289-4c86-aac4-72ddb9adae3d",
                            Dob = new DateTime(1998, 4, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FullName = "Đỗ Phương Thảo",
                            Gender = false,
                            IsDelete = false,
                            UserId = new Guid("3fa33d4f-8850-418b-98c5-f01607424632")
                        });
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.CustomerType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 9, 15, 16, 7, 19, 958, DateTimeKind.Local).AddTicks(3264));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("CustomerTypes");

                    b.HasData(
                        new
                        {
                            Id = "66da40a6-f289-4c86-aac4-72ddb9adae3d",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Bán lẻ"
                        },
                        new
                        {
                            Id = "5fc4a568-9472-4c12-bb0b-e9d4f9e66cf0",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Bán buôn"
                        });
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.DiscountType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("DiscountTypes");

                    b.HasData(
                        new
                        {
                            Id = "4f6f5f81-c6ae-4ddd-b726-62a54f724502",
                            Name = "Phần trăm"
                        },
                        new
                        {
                            Id = "f302e1da-00a5-454f-acf2-cef1bb44ed24",
                            Name = "Tiền mặt"
                        });
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.Employee", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(12)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("AvatarPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DefaultPhoneNumber")
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("Dob")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool?>("Gender")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = "EPN0001",
                            Address = "Số 88, Hải Triều, Số 99, Hải Triều, Quán Toan, Hồng Bàng, Hải Phòng",
                            DefaultPhoneNumber = "0123456789",
                            Dob = new DateTime(1998, 4, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FullName = "Nguyễn Dương Nguyên",
                            Gender = true,
                            IsDelete = false,
                            UserId = new Guid("33250e7f-d560-49f6-b106-719ed5e2424b")
                        },
                        new
                        {
                            Id = "EPN0002",
                            Address = "Số 99, Hải Triều, Số 99, Hải Triều, Quán Toan, Hồng Bàng, Hải Phòng",
                            DefaultPhoneNumber = "0123456789",
                            Dob = new DateTime(1998, 4, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FullName = "Bùi Thùy Dương",
                            Gender = false,
                            IsDelete = false,
                            UserId = new Guid("1398395b-ddf5-4afe-8e04-7e1da15b9a08")
                        });
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(12)");

                    b.Property<string>("CustomerId")
                        .HasColumnType("varchar(12)");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 9, 15, 16, 7, 20, 14, DateTimeKind.Local).AddTicks(1914));

                    b.Property<string>("DiscountDescription")
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("DiscountTypeId")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("DiscountValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal")
                        .HasDefaultValue(0m);

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("OrderStatusId")
                        .HasColumnType("char(36)");

                    b.Property<string>("PaymentStatusId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DiscountTypeId");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("PaymentStatusId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = "ODN0001",
                            CustomerId = "CUS0001",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DiscountValue = 0m,
                            IsDelete = false,
                            OrderStatusId = "88b82ce5-273a-4fac-9a54-3ef3d686036a",
                            PaymentStatusId = "e723be78-7769-420f-9c9b-4c5919a8e1d3"
                        },
                        new
                        {
                            Id = "ODN0002",
                            CustomerId = "CUS0002",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DiscountValue = 0m,
                            IsDelete = false,
                            OrderStatusId = "e7a6ced0-c306-4099-9692-50518c490281",
                            PaymentStatusId = "f917dc6c-6645-4090-8a7f-cd6e79e184e1"
                        });
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.OrderDetail", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("OrderId")
                        .HasColumnType("varchar(12)");

                    b.Property<string>("ProductId")
                        .HasColumnType("varchar(12)");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("ServiceName")
                        .HasColumnType("nvarchar(300)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");

                    b.HasData(
                        new
                        {
                            Id = "4f84f1c8-9b8d-4f7b-92d2-f715540b7e1a",
                            OrderId = "ODN0001",
                            ProductId = "PRN0001",
                            Quantity = 1,
                            UnitPrice = 22500000m
                        },
                        new
                        {
                            Id = "be117988-cd1c-45df-a5e8-69d8a1595d41",
                            OrderId = "ODN0002",
                            ProductId = "PRN0002",
                            Quantity = 1,
                            UnitPrice = 22500000m
                        });
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.OrderStatus", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("OrderStatuses");

                    b.HasData(
                        new
                        {
                            Id = "55162882-3bd7-49eb-a674-23963168a901",
                            Name = "Đặt hàng"
                        },
                        new
                        {
                            Id = "e7a6ced0-c306-4099-9692-50518c490281",
                            Name = "Đang giao dịch"
                        },
                        new
                        {
                            Id = "88b82ce5-273a-4fac-9a54-3ef3d686036a",
                            Name = "Hoàn thành"
                        },
                        new
                        {
                            Id = "c5a77e70-df2d-4007-8dd1-c727c12ab8bc",
                            Name = "Kết thúc"
                        },
                        new
                        {
                            Id = "2f0b8d31-5726-4475-a06e-18a26cc9d66b",
                            Name = "Đã hủy"
                        });
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.PaymentMethod", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods");

                    b.HasData(
                        new
                        {
                            Id = "ba8e558a-8f78-4045-b515-90d56c790b21",
                            Name = "Tiền mặt"
                        },
                        new
                        {
                            Id = "5e3b47e8-61d1-42b2-9bfa-a3242115677e",
                            Name = "Quẹt thẻ"
                        },
                        new
                        {
                            Id = "52fb071c-ab8a-476b-8e89-71aa40fec838",
                            Name = "Chuyển khoản"
                        });
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.PaymentStatus", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("PaymentStatuses");

                    b.HasData(
                        new
                        {
                            Id = "3a725c1e-255b-4609-aaec-312f58380799",
                            Name = "Chưa thanh toán"
                        },
                        new
                        {
                            Id = "f917dc6c-6645-4090-8a7f-cd6e79e184e1",
                            Name = "Thanh toán một phần"
                        },
                        new
                        {
                            Id = "e723be78-7769-420f-9c9b-4c5919a8e1d3",
                            Name = "Đã thanh toán"
                        });
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.PaymentVoucher", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(12)");

                    b.Property<string>("CustomerId")
                        .HasColumnType("varchar(12)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<decimal>("Paid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PayDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 9, 15, 16, 7, 20, 9, DateTimeKind.Local).AddTicks(2254));

                    b.Property<string>("PaymentMethodId")
                        .HasColumnType("char(36)");

                    b.Property<string>("PurchaseOrderId")
                        .HasColumnType("varchar(12)");

                    b.Property<string>("SupplierId")
                        .HasColumnType("varchar(12)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("PurchaseOrderId");

                    b.HasIndex("SupplierId");

                    b.ToTable("PaymentVouchers");

                    b.HasData(
                        new
                        {
                            Id = "PVN0001",
                            IsDelete = false,
                            Paid = 2250000000m,
                            PayDate = new DateTime(2020, 9, 15, 16, 7, 20, 62, DateTimeKind.Local).AddTicks(7307),
                            PaymentMethodId = "ba8e558a-8f78-4045-b515-90d56c790b21",
                            PurchaseOrderId = "PON0001"
                        },
                        new
                        {
                            Id = "PVN0002",
                            IsDelete = false,
                            Paid = 500000000m,
                            PayDate = new DateTime(2020, 9, 15, 16, 7, 20, 62, DateTimeKind.Local).AddTicks(8621),
                            PaymentMethodId = "ba8e558a-8f78-4045-b515-90d56c790b21",
                            PurchaseOrderId = "PON0002"
                        });
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(12)");

                    b.Property<string>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasDefaultValue(null);

                    b.Property<string>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasDefaultValue(null);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Information")
                        .HasColumnType("nvarchar(600)");

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("RetailPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<byte>("StarScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1);

                    b.Property<int>("Views")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<byte>("WarrantyPeriod")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)0);

                    b.Property<decimal>("WholesalePrices")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = "PRN0001",
                            BrandId = "5e8cf27f-cfc6-437b-a01b-a96805f4e202",
                            CategoryId = "215cf0eb-e27d-455b-9db9-d11520dc76bb",
                            IsDelete = false,
                            Name = "Macbook Pro 2020",
                            RetailPrice = 22500000m,
                            StarScore = (byte)1,
                            Views = 1340,
                            WarrantyPeriod = (byte)36,
                            WholesalePrices = 21500000m
                        },
                        new
                        {
                            Id = "PRN0002",
                            BrandId = "5e8cf27f-cfc6-437b-a01b-a96805f4e202",
                            CategoryId = "215cf0eb-e27d-455b-9db9-d11520dc76bb",
                            IsDelete = false,
                            Name = "Macbook Air 2020",
                            RetailPrice = 20500000m,
                            StarScore = (byte)1,
                            Views = 1340,
                            WarrantyPeriod = (byte)36,
                            WholesalePrices = 20000000m
                        });
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.ProductImage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("FullPath")
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsThumbnail")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ProductId")
                        .HasColumnType("varchar(12)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.ProductReview", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ProductId")
                        .HasColumnType("varchar(12)");

                    b.Property<byte>("StarScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1);

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("ProductReviews");
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.ProductReviewReply", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ProductReviewId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductReviewId");

                    b.HasIndex("UserId");

                    b.ToTable("ProductReviewReplies");
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.PurchaseOrder", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(12)");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 9, 15, 16, 7, 20, 3, DateTimeKind.Local).AddTicks(9392));

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DiscountDescription")
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("DiscountTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasDefaultValue(null);

                    b.Property<decimal>("DiscountValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal")
                        .HasDefaultValue(0m);

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("OrderStatusId")
                        .HasColumnType("char(36)");

                    b.Property<string>("PaymentStatusId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("PurchaseDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 9, 15, 16, 7, 20, 3, DateTimeKind.Local).AddTicks(9785));

                    b.Property<string>("SupplierId")
                        .HasColumnType("varchar(12)");

                    b.HasKey("Id");

                    b.HasIndex("DiscountTypeId");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("PaymentStatusId");

                    b.HasIndex("SupplierId");

                    b.ToTable("PurchaseOrders");

                    b.HasData(
                        new
                        {
                            Id = "PON0001",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryDate = new DateTime(2020, 9, 15, 16, 7, 20, 62, DateTimeKind.Local).AddTicks(752),
                            DiscountValue = 0m,
                            IsDelete = false,
                            OrderStatusId = "88b82ce5-273a-4fac-9a54-3ef3d686036a",
                            PaymentStatusId = "e723be78-7769-420f-9c9b-4c5919a8e1d3",
                            PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SupplierId = "SUN0001"
                        },
                        new
                        {
                            Id = "PON0002",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryDate = new DateTime(2020, 9, 15, 16, 7, 20, 62, DateTimeKind.Local).AddTicks(1887),
                            DiscountValue = 0m,
                            IsDelete = false,
                            OrderStatusId = "e7a6ced0-c306-4099-9692-50518c490281",
                            PaymentStatusId = "f917dc6c-6645-4090-8a7f-cd6e79e184e1",
                            PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SupplierId = "SUN0002"
                        });
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.PurchaseOrderDetail", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("CostName")
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("ProductId")
                        .HasColumnType("varchar(12)");

                    b.Property<string>("PurchaseOrderId")
                        .HasColumnType("varchar(12)");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseOrderId");

                    b.ToTable("PurchaseOrderDetails");

                    b.HasData(
                        new
                        {
                            Id = "9b9d7c98-7f42-4456-a22f-a081947912f0",
                            ProductId = "PRN0001",
                            PurchaseOrderId = "PON0001",
                            Quantity = 100,
                            UnitPrice = 22500000m
                        },
                        new
                        {
                            Id = "a3f939b1-f01d-4d06-a4aa-9ce8be174cfe",
                            ProductId = "PRN0002",
                            PurchaseOrderId = "PON0002",
                            Quantity = 50,
                            UnitPrice = 22500000m
                        });
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.ReceiptVoucher", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(12)");

                    b.Property<string>("CustomerId")
                        .HasColumnType("varchar(12)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("OrderId")
                        .HasColumnType("varchar(12)");

                    b.Property<string>("PaymentMethodId")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("Received")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime>("ReceivedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 9, 15, 16, 7, 20, 20, DateTimeKind.Local).AddTicks(3172));

                    b.Property<string>("SupplierId")
                        .HasColumnType("varchar(12)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("SupplierId");

                    b.ToTable("ReceiptVouchers");

                    b.HasData(
                        new
                        {
                            Id = "RVN0001",
                            IsDelete = false,
                            OrderId = "ODN0001",
                            PaymentMethodId = "ba8e558a-8f78-4045-b515-90d56c790b21",
                            Received = 22500000m,
                            ReceivedDate = new DateTime(2020, 9, 15, 16, 7, 20, 63, DateTimeKind.Local).AddTicks(7018)
                        },
                        new
                        {
                            Id = "RVN0002",
                            IsDelete = false,
                            OrderId = "ODN0002",
                            PaymentMethodId = "ba8e558a-8f78-4045-b515-90d56c790b21",
                            Received = 10500000m,
                            ReceivedDate = new DateTime(2020, 9, 15, 16, 7, 20, 63, DateTimeKind.Local).AddTicks(7901)
                        });
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.ShippingOrder", b =>
                {
                    b.Property<string>("OrderId")
                        .HasColumnType("varchar(12)");

                    b.Property<string>("ShippingId")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Address")
                        .HasColumnType("varchar(300)");

                    b.Property<string>("CustomerId")
                        .HasColumnType("varchar(12)");

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 9, 15, 16, 7, 20, 28, DateTimeKind.Local).AddTicks(437));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("Fee")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("ShippingStatusId")
                        .HasColumnType("char(36)");

                    b.Property<string>("TransporterId")
                        .HasColumnType("char(36)");

                    b.HasKey("OrderId", "ShippingId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ShippingStatusId");

                    b.HasIndex("TransporterId");

                    b.ToTable("ShippingOrders");
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.ShippingStatus", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("ShippingStatus");
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.Stock", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("varchar(12)");

                    b.Property<int>("AbleToSale")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("Inventory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("ProductId");

                    b.ToTable("Stocks");

                    b.HasData(
                        new
                        {
                            ProductId = "PRN0001",
                            AbleToSale = 99,
                            Inventory = 99
                        },
                        new
                        {
                            ProductId = "PRN0002",
                            AbleToSale = 49,
                            Inventory = 49
                        });
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.StockAction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("StockActions");

                    b.HasData(
                        new
                        {
                            Id = "edf29819-8c57-45dd-94c9-f3a90b7c3d68",
                            Name = "Khởi tạo"
                        },
                        new
                        {
                            Id = "dc5c823e-f810-44e6-b6c9-6e22c33dd6f5",
                            Name = "Xuất kho giao hàng cho khách/shipper"
                        },
                        new
                        {
                            Id = "b3af0293-4dcd-4d5d-9fca-e2af586e42df",
                            Name = "Nhập hàng vào kho"
                        },
                        new
                        {
                            Id = "d708921e-bad5-46a6-8b81-51b233d9f58c",
                            Name = "Cân bằng kho"
                        });
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.StockHistory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("char(36)");

                    b.Property<int>("ChangeQuantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("EmployeeId")
                        .HasColumnType("varchar(12)");

                    b.Property<string>("OrderDetailId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ProductId")
                        .HasColumnType("varchar(12)");

                    b.Property<string>("PurchaseOrderDetailId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("RecordDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 9, 15, 16, 7, 20, 23, DateTimeKind.Local).AddTicks(6751));

                    b.Property<string>("StockActionId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("OrderDetailId")
                        .IsUnique()
                        .HasFilter("[OrderDetailId] IS NOT NULL");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseOrderDetailId")
                        .IsUnique()
                        .HasFilter("[PurchaseOrderDetailId] IS NOT NULL");

                    b.HasIndex("StockActionId");

                    b.ToTable("StockHistories");

                    b.HasData(
                        new
                        {
                            Id = "6a5b995b-6162-4eeb-b6c4-e69e06f05215",
                            ChangeQuantity = 100,
                            EmployeeId = "EPN0001",
                            ProductId = "PRN0001",
                            PurchaseOrderDetailId = "9b9d7c98-7f42-4456-a22f-a081947912f0",
                            RecordDate = new DateTime(2020, 9, 15, 16, 7, 20, 63, DateTimeKind.Local).AddTicks(9042),
                            StockActionId = "edf29819-8c57-45dd-94c9-f3a90b7c3d68"
                        },
                        new
                        {
                            Id = "c6a1627c-1ea3-41f2-af57-91fd7a61fd4b",
                            ChangeQuantity = 50,
                            EmployeeId = "EPN0001",
                            ProductId = "PRN0002",
                            PurchaseOrderDetailId = "a3f939b1-f01d-4d06-a4aa-9ce8be174cfe",
                            RecordDate = new DateTime(2020, 9, 15, 16, 7, 20, 64, DateTimeKind.Local).AddTicks(1166),
                            StockActionId = "edf29819-8c57-45dd-94c9-f3a90b7c3d68"
                        },
                        new
                        {
                            Id = "abbfb2d1-d0f4-48c2-9edd-925d0eb3cb1c",
                            ChangeQuantity = -1,
                            EmployeeId = "EPN0001",
                            OrderDetailId = "4f84f1c8-9b8d-4f7b-92d2-f715540b7e1a",
                            ProductId = "PRN0001",
                            RecordDate = new DateTime(2020, 9, 15, 16, 7, 20, 64, DateTimeKind.Local).AddTicks(1223),
                            StockActionId = "dc5c823e-f810-44e6-b6c9-6e22c33dd6f5"
                        },
                        new
                        {
                            Id = "92df7133-8a34-494e-b625-8f1b93c91218",
                            ChangeQuantity = -1,
                            EmployeeId = "EPN0001",
                            OrderDetailId = "be117988-cd1c-45df-a5e8-69d8a1595d41",
                            ProductId = "PRN0002",
                            RecordDate = new DateTime(2020, 9, 15, 16, 7, 20, 64, DateTimeKind.Local).AddTicks(1749),
                            StockActionId = "dc5c823e-f810-44e6-b6c9-6e22c33dd6f5"
                        });
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.Supplier", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(12)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(12)")
                        .HasDefaultValue(null);

                    b.Property<string>("Fax")
                        .HasColumnType("varchar(30)");

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Website")
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Suppliers");

                    b.HasData(
                        new
                        {
                            Id = "SUN0001",
                            Address = "Số 99, Hải Triều, Quán Toan, Hồng Bàng, Hải Phòng",
                            Email = "contyabc@gmail.com",
                            EmployeeId = "EPN0001",
                            Fax = "1234567890",
                            IsDelete = false,
                            Name = "Công ty TNHH ABC",
                            PhoneNumber = "1234567890",
                            Website = "abc.com.vn"
                        },
                        new
                        {
                            Id = "SUN0002",
                            Address = "Số 99, Hải Triều, Quán Toan, Hồng Bàng, Hải Phòng",
                            Email = "contyabc@gmail.com",
                            EmployeeId = "EPN0001",
                            Fax = "1234567890",
                            IsDelete = false,
                            Name = "Công ty TNHH DEF",
                            PhoneNumber = "1234567890",
                            Website = "abc.com.vn"
                        });
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.Transporter", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Transporters");

                    b.HasData(
                        new
                        {
                            Id = "71f27b74-f7e6-44d7-a4e7-9698ca304044",
                            Name = "Giao hàng nhanh",
                            PhoneNumber = "1234567890"
                        });
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.AppRole", b =>
                {
                    b.HasOne("eQACoLTD.Data.Entities.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId");
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.Cart", b =>
                {
                    b.HasOne("eQACoLTD.Data.Entities.Product", "Product")
                        .WithMany("Carts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eQACoLTD.Data.Entities.AppUser", "AppUser")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.Customer", b =>
                {
                    b.HasOne("eQACoLTD.Data.Entities.CustomerType", "CustomerType")
                        .WithMany("Customers")
                        .HasForeignKey("CustomerTypeId");

                    b.HasOne("eQACoLTD.Data.Entities.AppUser", "AppUser")
                        .WithOne("Customer")
                        .HasForeignKey("eQACoLTD.Data.Entities.Customer", "UserId");
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.Employee", b =>
                {
                    b.HasOne("eQACoLTD.Data.Entities.AppUser", "AppUser")
                        .WithOne("Employee")
                        .HasForeignKey("eQACoLTD.Data.Entities.Employee", "UserId");
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.Order", b =>
                {
                    b.HasOne("eQACoLTD.Data.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId");

                    b.HasOne("eQACoLTD.Data.Entities.DiscountType", "DiscountType")
                        .WithMany("Orders")
                        .HasForeignKey("DiscountTypeId");

                    b.HasOne("eQACoLTD.Data.Entities.OrderStatus", "OrderStatus")
                        .WithMany("Orders")
                        .HasForeignKey("OrderStatusId");

                    b.HasOne("eQACoLTD.Data.Entities.PaymentStatus", "PaymentStatus")
                        .WithMany("Orders")
                        .HasForeignKey("PaymentStatusId");
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.OrderDetail", b =>
                {
                    b.HasOne("eQACoLTD.Data.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId");

                    b.HasOne("eQACoLTD.Data.Entities.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.PaymentVoucher", b =>
                {
                    b.HasOne("eQACoLTD.Data.Entities.Customer", "Customer")
                        .WithMany("PaymentVouchers")
                        .HasForeignKey("CustomerId");

                    b.HasOne("eQACoLTD.Data.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany("PaymentVouchers")
                        .HasForeignKey("PaymentMethodId");

                    b.HasOne("eQACoLTD.Data.Entities.PurchaseOrder", "PurchaseOrder")
                        .WithMany("PaymentVouchers")
                        .HasForeignKey("PurchaseOrderId");

                    b.HasOne("eQACoLTD.Data.Entities.Supplier", "Supplier")
                        .WithMany("PaymentVouchers")
                        .HasForeignKey("SupplierId");
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.Product", b =>
                {
                    b.HasOne("eQACoLTD.Data.Entities.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId");

                    b.HasOne("eQACoLTD.Data.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId");
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.ProductImage", b =>
                {
                    b.HasOne("eQACoLTD.Data.Entities.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.ProductReview", b =>
                {
                    b.HasOne("eQACoLTD.Data.Entities.Product", "Product")
                        .WithMany("ProductReviews")
                        .HasForeignKey("ProductId");

                    b.HasOne("eQACoLTD.Data.Entities.AppUser", "AppUser")
                        .WithMany("ProductReviews")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.ProductReviewReply", b =>
                {
                    b.HasOne("eQACoLTD.Data.Entities.ProductReview", "ProductReview")
                        .WithMany("ProductReviewReplies")
                        .HasForeignKey("ProductReviewId");

                    b.HasOne("eQACoLTD.Data.Entities.AppUser", "AppUser")
                        .WithMany("ProductReviewReplies")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.PurchaseOrder", b =>
                {
                    b.HasOne("eQACoLTD.Data.Entities.DiscountType", "DiscountType")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("DiscountTypeId");

                    b.HasOne("eQACoLTD.Data.Entities.OrderStatus", "OrderStatus")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("OrderStatusId");

                    b.HasOne("eQACoLTD.Data.Entities.PaymentStatus", "PaymentStatus")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("PaymentStatusId");

                    b.HasOne("eQACoLTD.Data.Entities.Supplier", "Supplier")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("SupplierId");
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.PurchaseOrderDetail", b =>
                {
                    b.HasOne("eQACoLTD.Data.Entities.Product", "Product")
                        .WithMany("PurchaseOrderDetails")
                        .HasForeignKey("ProductId");

                    b.HasOne("eQACoLTD.Data.Entities.PurchaseOrder", "PurchaseOrder")
                        .WithMany("PurchaseOrderDetails")
                        .HasForeignKey("PurchaseOrderId");
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.ReceiptVoucher", b =>
                {
                    b.HasOne("eQACoLTD.Data.Entities.Customer", "Customer")
                        .WithMany("ReceiptVouchers")
                        .HasForeignKey("CustomerId");

                    b.HasOne("eQACoLTD.Data.Entities.Order", "Order")
                        .WithMany("ReceiptVouchers")
                        .HasForeignKey("OrderId");

                    b.HasOne("eQACoLTD.Data.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany("ReceiptVouchers")
                        .HasForeignKey("PaymentMethodId");

                    b.HasOne("eQACoLTD.Data.Entities.Supplier", "Supplier")
                        .WithMany("ReceiptVouchers")
                        .HasForeignKey("SupplierId");
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.ShippingOrder", b =>
                {
                    b.HasOne("eQACoLTD.Data.Entities.Customer", "Customer")
                        .WithMany("ShippingOrders")
                        .HasForeignKey("CustomerId");

                    b.HasOne("eQACoLTD.Data.Entities.Order", "Order")
                        .WithMany("ShippingOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eQACoLTD.Data.Entities.ShippingStatus", "ShippingStatus")
                        .WithMany("ShippingOrders")
                        .HasForeignKey("ShippingStatusId");

                    b.HasOne("eQACoLTD.Data.Entities.Transporter", "Transporter")
                        .WithMany("ShippingOrders")
                        .HasForeignKey("TransporterId");
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.Stock", b =>
                {
                    b.HasOne("eQACoLTD.Data.Entities.Product", "Product")
                        .WithOne("Stock")
                        .HasForeignKey("eQACoLTD.Data.Entities.Stock", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.StockHistory", b =>
                {
                    b.HasOne("eQACoLTD.Data.Entities.Employee", "Employee")
                        .WithMany("StockHistories")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("eQACoLTD.Data.Entities.OrderDetail", "OrderDetail")
                        .WithOne("StockHistory")
                        .HasForeignKey("eQACoLTD.Data.Entities.StockHistory", "OrderDetailId");

                    b.HasOne("eQACoLTD.Data.Entities.Product", "Product")
                        .WithMany("StockHistories")
                        .HasForeignKey("ProductId");

                    b.HasOne("eQACoLTD.Data.Entities.PurchaseOrderDetail", "PurchaseOrderDetail")
                        .WithOne("StockHistory")
                        .HasForeignKey("eQACoLTD.Data.Entities.StockHistory", "PurchaseOrderDetailId");

                    b.HasOne("eQACoLTD.Data.Entities.StockAction", "StockAction")
                        .WithMany("StockHistories")
                        .HasForeignKey("StockActionId");
                });

            modelBuilder.Entity("eQACoLTD.Data.Entities.Supplier", b =>
                {
                    b.HasOne("eQACoLTD.Data.Entities.Employee", "Employee")
                        .WithMany("Suppliers")
                        .HasForeignKey("EmployeeId");
                });
#pragma warning restore 612, 618
        }
    }
}
